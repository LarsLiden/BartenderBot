{"version":3,"file":"conversationlearner-models.es5.js","sources":["../src/slateSerializer.ts","../src/Action.ts","../src/App.ts","../src/Entity.ts","../src/TrainDialog.ts","../src/ModelUtils.ts","../src/FilledEntity.ts","../src/KeyGen.ts","../src/ReplayError.ts","../src/Session.ts","../src/Teach.ts","../src/UI.ts","../src/conversationlearner-models.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// TODO: Copied from ConversationLearner-UI. Need to improve Action design to find out how to consolidate knowledge to single layer\n// Originally ConversationLearner-models was intended to know have to understand the tree structure which is why we added the\n// pre-serialized 'text' field; however, now can't use the text field becuase it includes entity id's instead of human-readable names\n// Instead of having to decide wether to perform substitutions from the serialized text or from the tree it's better to\n// just have single method used everywhere\n\n// Can't import because it's from ConversationLearner-UI\n//import { NodeTypes } from \"./models\";\nenum NodeTypes {\n  Mention = 'mention-inline-node',\n  Optional = 'optional-inline-node'\n}\n\n// Based on: https://github.com/ianstormtaylor/slate/blob/master/packages/slate-plain-serializer/src/index.js\n\nexport interface IOptions {\n  fallbackToOriginal: boolean\n  preserveOptionalNodeWrappingCharacters: boolean\n}\n\nconst defaultOptions: IOptions = {\n  fallbackToOriginal: false,\n  preserveOptionalNodeWrappingCharacters: false\n}\n\nfunction serialize(value: any, entityValuesMap: Map<string, string>, userOptions: Partial<IOptions> = {}): string {\n  const options = {\n    ...defaultOptions,\n    ...userOptions\n  }\n\n  const valueAsJson = typeof value.toJSON === 'function' ? value.toJSON() : value\n  const processedDocument = removeOptionalNodesWithoutEntityValues(valueAsJson.document, Array.from(entityValuesMap.keys()))\n  return serializeNode(processedDocument, entityValuesMap, options)\n}\n\n/**\n * Given node return filter out optional nodes without matching values provided\n *\n * E.g. You are welcome[, $name] -> You are welcome\n * @param node Slate Node\n * @param entityValues Key Value pair of entity id to entity display value\n */\nfunction removeOptionalNodesWithoutEntityValues(node: any, entityIds: string[]): any | undefined {\n  if (node.kind === 'inline' && node.type === NodeTypes.Optional) {\n    const entityIdsWithinOptionalNode = getEntityIds(node)\n    const hasValues = entityIdsWithinOptionalNode.every(x => entityIds.includes(x))\n    return hasValues ? node : undefined\n  }\n\n  if (Array.isArray(node.nodes)) {\n    node.nodes = node.nodes.map((n: any) => removeOptionalNodesWithoutEntityValues(n, entityIds)).filter((n: any) => n)\n  }\n\n  return node\n}\n\nfunction getEntityIds(node: any): string[] {\n  const entityIds: string[] = []\n\n  // If current node is inline node which we know to have entityId then save it in the list\n  if (node.kind === 'inline' && node.type === NodeTypes.Mention) {\n    // This check is required because when input is Slate Value node is Immutable.Map object\n    // but it could also be a node from value.toJSON()\n    const data = typeof node.data.toJS === 'function' ? node.data.toJS() : node.data\n    const option = data.option\n\n    if (!option) {\n      throw new Error(`Attempting to serialize inline node but it did not have option`)\n    }\n\n    const entityId = option.id\n    entityIds.push(entityId)\n  }\n\n  // Technically this would never get called because inline nodes shouldn't have other children which are inline nodes\n  // however, it's good to have working depth-first-traversal anyways\n  if (Array.isArray(node.nodes)) {\n    const childrenEntityIds: string[] = node.nodes\n      .map((n: any) => getEntityIds(n))\n      .reduce((totalIds: string[], nodeIds: string[]) => [...totalIds, ...nodeIds], [])\n\n    entityIds.push(...childrenEntityIds)\n  }\n\n  return entityIds\n}\n\nfunction serializeNode(node: any, entityValues: Map<string, string>, options: IOptions): string {\n  if (node.kind === 'text') {\n    return node.leaves.map((n: any) => n.text).join('')\n  }\n\n  const serializedChildNodes = node.nodes.map((n: any) => serializeNode(n, entityValues, options))\n\n  if (node.kind === 'inline' && node.type === NodeTypes.Mention) {\n    // This check is required because when input is Slate Value node is Immutable.Map object\n    // but it could also be a node from value.toJSON()\n    const data = typeof node.data.toJS === 'function' ? node.data.toJS() : node.data\n\n    if (!data.completed) {\n      return serializedChildNodes.join('')\n    }\n\n    const option = data.option\n\n    if (!option) {\n      throw new Error(`Attempting to serialize inline node but it did not have option`)\n    }\n\n    const entityId = option.id\n    const mapContainsEntity = entityValues.has(entityId)\n    if (!mapContainsEntity) {\n      if (options.fallbackToOriginal) {\n        return serializedChildNodes.join('')\n      }\n\n      const entityValuesString = Array.from(entityValues.entries())\n        .map(([id, value]) => `${id}: ${value}`)\n        .join(', ')\n      throw new Error(\n        `Inline node representing entity ${entityId} was NOT provided a value in the given entityValue map: [${entityValuesString}]`\n      )\n    }\n\n    return entityValues.get(entityId)!\n  }\n\n  if (node.kind === 'document') {\n    return serializedChildNodes.join('\\n')\n  }\n\n  const serializedChildren = serializedChildNodes.join('')\n\n  return node.kind === 'inline' && node.type === NodeTypes.Optional\n    ? options.preserveOptionalNodeWrappingCharacters\n      ? serializedChildren\n      : serializedChildren.slice(1, -1)\n    : serializedChildren\n}\n\nexport default {\n  serialize\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport EntityIdSerializer, { IOptions } from './slateSerializer'\nimport { ScoredAction } from './Score'\n\nexport enum ActionTypes {\n  TEXT = 'TEXT',\n  API_LOCAL = 'API_LOCAL',\n  CARD = 'CARD',\n  END_SESSION = 'END_SESSION'\n}\n\nexport class ActionBase {\n  actionId: string\n  actionType: ActionTypes\n  createdDateTime: string\n  payload: string\n  isTerminal: boolean\n  requiredEntitiesFromPayload: string[]\n  requiredEntities: string[] = []\n  negativeEntities: string[] = []\n  suggestedEntity: string | null = null\n  version: number\n  packageCreationId: number\n  packageDeletionId: number\n\n  constructor(action: ActionBase) {\n    this.actionId = action.actionId\n    this.actionType = action.actionType\n    this.createdDateTime = action.createdDateTime\n    this.payload = action.payload\n    this.isTerminal = action.isTerminal\n    this.requiredEntitiesFromPayload = action.requiredEntitiesFromPayload || []\n    this.requiredEntities = action.requiredEntities || []\n    this.negativeEntities = action.negativeEntities || []\n    this.suggestedEntity = action.suggestedEntity || null\n    this.version = action.version\n    this.packageCreationId = action.packageCreationId\n    this.packageDeletionId = action.packageDeletionId\n  }\n\n  // TODO: Refactor away from generic GetPayload for different action types\n  // They all return strings but the strings are very different (Text is the substituted values, but other actions dont)\n  // This causes issue of having to pass in entityValueMap even when it's not required, but making it optional ruins\n  // safety for those places which should require it.\n  // TODO: Remove ScoredAction since it doesn't have payload\n  static GetPayload(action: ActionBase | ScoredAction, entityValues: Map<string, string>): string {\n    if (action.actionType === ActionTypes.TEXT) {\n      /**\n       * For backwards compatibility check if payload is of new TextPayload type\n       * Ideally we would implement schema refactor:\n       * 1. Make payloads discriminated unions (E.g. After checking the action.type, flow control knows the type of the payload property)\n       * This removes the need for the GetPayload function and GetArguments which are brittle coding patterns.\n       */\n      try {\n        const textPayload = JSON.parse(action.payload) as TextPayload\n        return EntityIdSerializer.serialize(textPayload.json, entityValues)\n      } catch (e) {\n        const error = e as Error\n        throw new Error(\n          `Error when attempting to parse text action payload. This might be an old action which was saved as a string.  Please create a new action. ${\n            error.message\n          }`\n        )\n      }\n    } else if (action.actionType === ActionTypes.END_SESSION) {\n      const textPayload = JSON.parse(action.payload) as TextPayload\n      return EntityIdSerializer.serialize(textPayload.json, entityValues)\n    }\n    // For API or CARD the payload field of the outer payload is the name of API or the filename of the card template without extension\n    else if (ActionTypes.CARD === action.actionType) {\n      let cardPayload = JSON.parse(action.payload) as CardPayload\n      return cardPayload.payload\n    } else if (ActionTypes.API_LOCAL === action.actionType) {\n      let actionPayload = JSON.parse(action.payload) as ActionPayload\n      return actionPayload.payload\n    }\n    return action.payload\n  }\n\n  /** Return arguments for an action */\n  static GetActionArguments(action: ActionBase | ScoredAction): ActionArgument[] {\n    if (ActionTypes.CARD === action.actionType) {\n      let cardPayload = JSON.parse(action.payload) as CardPayload\n      return cardPayload.arguments.map(aa => new ActionArgument(aa))\n    } else if (action.actionType === ActionTypes.API_LOCAL) {\n      let actionPayload = JSON.parse(action.payload) as ActionPayload\n      return [...actionPayload.logicArguments, ...actionPayload.renderArguments].map(aa => new ActionArgument(aa))\n    }\n\n    return []\n  }\n}\n\nexport interface ActionList {\n  actions: ActionBase[]\n}\n\nexport interface ActionIdList {\n  actionIds: string[]\n}\n\n// TODO: Remove was originally storing two properties text/json\n// but now text is removed and this is only here for backwards compatibility\nexport interface TextPayload {\n  json: object\n}\n\nexport interface ActionPayloadSingleArguments {\n  payload: string\n  arguments: IActionArgument[]\n}\n\nexport interface ActionPayload {\n  payload: string\n  logicArguments: IActionArgument[]\n  renderArguments: IActionArgument[]\n}\n\nexport interface CardPayload {\n  payload: string\n  arguments: IActionArgument[]\n}\n\nexport interface IActionArgument {\n  parameter: string\n  value: TextPayload\n}\n\nexport class ActionArgument {\n  parameter: string\n  value: object\n\n  constructor(actionArgument: IActionArgument) {\n    this.parameter = actionArgument.parameter\n    this.value = actionArgument.value.json\n  }\n\n  renderValue(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): string {\n    return EntityIdSerializer.serialize(this.value, entityValues, serializerOptions)\n  }\n}\n\nexport interface RenderedActionArgument {\n  parameter: string\n  value: string | null\n}\n\nexport class TextAction extends ActionBase {\n  value: object // json slate value\n\n  constructor(action: ActionBase) {\n    super(action)\n\n    if (action.actionType !== ActionTypes.TEXT) {\n      throw new Error(`You attempted to create text action from action of type: ${action.actionType}`)\n    }\n\n    this.value = JSON.parse(this.payload).json\n  }\n\n  renderValue(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): string {\n    return EntityIdSerializer.serialize(this.value, entityValues, serializerOptions)\n  }\n}\n\nexport class ApiAction extends ActionBase {\n  name: string\n  logicArguments: ActionArgument[]\n  renderArguments: ActionArgument[]\n\n  constructor(action: ActionBase) {\n    super(action)\n\n    if (action.actionType !== ActionTypes.API_LOCAL) {\n      throw new Error(`You attempted to create api action from action of type: ${action.actionType}`)\n    }\n\n    const actionPayload: ActionPayload = JSON.parse(this.payload)\n    this.name = actionPayload.payload\n    this.logicArguments = actionPayload.logicArguments.map(aa => new ActionArgument(aa))\n    this.renderArguments = actionPayload.renderArguments.map(aa => new ActionArgument(aa))\n  }\n  renderLogicArguments(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): RenderedActionArgument[] {\n    return this.renderArgs(this.logicArguments, entityValues, serializerOptions)\n  }\n\n  renderRenderArguments(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): RenderedActionArgument[] {\n    return this.renderArgs(this.renderArguments, entityValues, serializerOptions)\n  }\n\n  private renderArgs(\n    args: ActionArgument[],\n    entityValues: Map<string, string>,\n    serializerOptions: Partial<IOptions> = {}\n  ): RenderedActionArgument[] {\n    return args.map(aa => {\n      let value = null\n      try {\n        value = EntityIdSerializer.serialize(aa.value, entityValues, serializerOptions)\n      } catch (error) {\n        // Just return null if argument doesn't have a value\n      }\n\n      return {\n        ...aa,\n        value: value\n      }\n    })\n  }\n}\n\nexport class CardAction extends ActionBase {\n  templateName: string\n  arguments: ActionArgument[]\n\n  constructor(action: ActionBase) {\n    super(action)\n\n    if (action.actionType !== ActionTypes.CARD) {\n      throw new Error(`You attempted to create card action from action of type: ${action.actionType}`)\n    }\n\n    const payload: CardPayload = JSON.parse(this.payload)\n    this.templateName = payload.payload\n    this.arguments = payload.arguments.map(aa => new ActionArgument(aa))\n  }\n\n  renderArguments(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): RenderedActionArgument[] {\n    return this.arguments.map(aa => {\n      let value = null\n      try {\n        value = EntityIdSerializer.serialize(aa.value, entityValues, serializerOptions)\n      } catch (error) {\n        // Just return null if argument doesn't have a value\n      }\n\n      return {\n        ...aa,\n        value: value\n      }\n    })\n  }\n}\n\nexport class SessionAction extends ActionBase {\n  value: object // json slate value\n\n  constructor(action: ActionBase) {\n    super(action)\n\n    if (action.actionType !== ActionTypes.END_SESSION) {\n      throw new Error(`You attempted to create session action from action of type: ${action.actionType}`)\n    }\n\n    this.value = JSON.parse(this.payload).json\n  }\n\n  renderValue(entityValues: Map<string, string>, serializerOptions: Partial<IOptions> = {}): string {\n    return EntityIdSerializer.serialize(this.value, entityValues, serializerOptions)\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nexport interface AppMetaData {\n  botFrameworkApps: string[]\n  markdown?: string\n  video?: string\n  isLoggingOn: boolean\n}\n\nexport interface AppBase {\n  appName: string\n  appId: string\n  createdDateTime: string\n  lastModifiedDateTime: string\n  locale: string\n  luisAppId: string\n  metadata: AppMetaData\n  trainingFailureMessage: string | null\n  trainingStatus: TrainingStatusCode\n  datetime: Date\n  packageVersions: PackageReference[]\n  livePackageId: string\n  devPackageId: string\n}\n\nexport interface AppList {\n  apps: AppBase[]\n}\n\nexport interface AppIdList {\n  appIds: string[]\n}\n\nexport enum TrainingStatusCode {\n  Queued = 'queued',\n  Running = 'running',\n  Completed = 'completed',\n  Failed = 'failed'\n}\n\nexport interface TrainingStatus {\n  trainingStatus: TrainingStatusCode\n  trainingFailureMessage: string | null\n}\n\nexport interface PackageReference {\n  packageId: string\n  packageVersion: string\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nexport enum EntityType {\n  LOCAL = 'LOCAL',\n  LUIS = 'LUIS'\n}\n\nexport const makeNegative = (entity: EntityBase, positiveId: string): EntityBase => ({\n  ...entity,\n  negativeId: null,\n  positiveId\n})\n\nexport interface EntityBase {\n  entityId: string\n  entityName: string\n  entityType: string\n  createdDateTime: string\n  version: number | null\n  packageCreationId: number | null\n  packageDeletionId: number | null\n\n  isMultivalue: boolean\n\n  /** If set, has a negative and positive version */\n  isNegatible: boolean\n\n  /** If Negatable, the Id of negative entity associates with this Entity */\n  negativeId: string | null\n\n  /** If a Negative, Id of positive entity associated with this Entity */\n  positiveId: string | null\n}\n\nexport interface LabeledEntity {\n  entityId: string\n  startCharIndex: number\n  endCharIndex: number\n  entityText: string\n  resolution: {}\n  builtinType: string\n}\n\nexport interface PredictedEntity extends LabeledEntity {\n  score: number | undefined\n}\n\nexport interface EntityList {\n  entities: EntityBase[]\n}\n\nexport interface EntityIdList {\n  entityIds: string[]\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ScoreInput, ScoredAction } from './Score'\nimport { LabeledEntity } from './Entity'\nimport { AppDefinition } from './AppDefinition'\nimport { FilledEntity } from './FilledEntity'\n\nexport enum SenderType {\n  User = 0,\n  Bot = 1\n}\n\nexport interface TextVariation {\n  text: string\n  labelEntities: LabeledEntity[]\n}\n\nexport interface TrainExtractorStep {\n  textVariations: TextVariation[]\n}\n\nexport interface TrainScorerStep {\n  input: ScoreInput\n  // ID of the selected action\n  labelAction: string | undefined\n  logicResult: string | undefined\n  // Score of the selected action\n  scoredAction: ScoredAction | undefined\n}\n\nexport interface TrainRound {\n  extractorStep: TrainExtractorStep\n  scorerSteps: TrainScorerStep[]\n}\n\nexport interface TrainDialogInput {\n  sourceLogDialogId: string\n  rounds: TrainRound[]\n  definitions?: AppDefinition | null\n  invalid?: boolean\n}\n\nexport interface TrainDialog extends TrainDialogInput {\n  createdDateTime: string\n  lastModifiedDateTime: string\n  trainDialogId: string\n  version: number\n  packageCreationId: number\n  packageDeletionId: number\n  initialFilledEntities: FilledEntity[]\n}\n\nexport interface TrainResponse {\n  packageId: number\n  trainingStatus: string\n  trainDialogId: string\n}\n\nexport interface TrainDialogList {\n  trainDialogs: TrainDialog[]\n  definitions?: AppDefinition\n}\n\nexport interface TrainDialogIdList {\n  trainDialogIds: string[]\n}\n\nexport interface CreateTeachParams {\n  contextDialog: TrainRound[]\n  sourceLogDialogId?: string\n  initialFilledEntities: FilledEntity[]\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ExtractResponse } from './Extract'\nimport { Teach, TeachResponse } from './Teach'\nimport { TrainRound, TrainDialog, TrainScorerStep, TextVariation, CreateTeachParams, SenderType } from './TrainDialog'\nimport { LogDialog, LogRound, LogScorerStep } from './LogDialog'\nimport { EntityBase, LabeledEntity, PredictedEntity } from './Entity'\nimport { ActionBase } from './Action'\nimport { AppDefinition } from './AppDefinition'\n\nexport class ModelUtils {\n  public static generateGUID(): string {\n    let d = new Date().getTime()\n    let guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, char => {\n      let r = ((d + Math.random() * 16) % 16) | 0\n      d = Math.floor(d / 16)\n      return (char === 'x' ? r : (r & 0x3) | 0x8).toString(16)\n    })\n    return guid\n  }\n\n  /** Remove n words from start of string */\n  public static RemoveWords(text: string, numWords: number): string {\n    if (text.length === 0 || numWords === 0) {\n      return text\n    }\n\n    const firstSpace = text.indexOf(' ')\n    const remaining = firstSpace > 0 ? text.slice(firstSpace + 1) : ''\n    numWords--\n\n    return this.RemoveWords(remaining, numWords)\n  }\n\n  //====================================================================\n  // CONVERSION: LabeledEntity == PredictedEntity\n  //====================================================================\n  public static ToLabeledEntity(predictedEntity: PredictedEntity): LabeledEntity {\n    const { score, ...labeledEntity } = predictedEntity\n    return predictedEntity\n  }\n\n  public static ToLabeledEntities(predictedEntities: PredictedEntity[]): LabeledEntity[] {\n    let labeledEntities: LabeledEntity[] = []\n    for (let predictedEntity of predictedEntities) {\n      let labelEntity = ModelUtils.ToLabeledEntity(predictedEntity)\n      labeledEntities.push(labelEntity)\n    }\n    return labeledEntities\n  }\n\n  public static ToPredictedEntity(labeledEntity: LabeledEntity): PredictedEntity {\n    return {\n      ...labeledEntity,\n      score: undefined\n    }\n  }\n\n  public static ToPredictedEntities(labeledEntities: LabeledEntity[]): PredictedEntity[] {\n    let predictedEntities: PredictedEntity[] = []\n    for (let labeledEntity of labeledEntities) {\n      let predictedEntity = ModelUtils.ToPredictedEntity(labeledEntity)\n      predictedEntities.push(predictedEntity)\n    }\n    return predictedEntities\n  }\n\n  //====================================================================\n  // CONVERSION: ExtractResponse == TextVariation\n  //====================================================================\n  public static ToTextVariation(extractResponse: ExtractResponse): TextVariation {\n    let labeledEntities = this.ToLabeledEntities(extractResponse.predictedEntities)\n    let textVariation = {\n      text: extractResponse.text,\n      labelEntities: labeledEntities\n    }\n    return textVariation\n  }\n\n  public static ToExtractResponses(textVariations: TextVariation[]): ExtractResponse[] {\n    let extractResponses: ExtractResponse[] = []\n    for (let textVariation of textVariations) {\n      let predictedEntities = this.ToPredictedEntities(textVariation.labelEntities)\n      let extractResponse: ExtractResponse = {\n        definitions: {\n          entities: [],\n          actions: [],\n          trainDialogs: []\n        },\n        packageId: '',\n        metrics: {\n          wallTime: 0\n        },\n        text: textVariation.text,\n        predictedEntities: predictedEntities\n      }\n      extractResponses.push(extractResponse)\n    }\n    return extractResponses\n  }\n\n  public static ToTextVariations(extractResponses: ExtractResponse[]): TextVariation[] {\n    let textVariations: TextVariation[] = []\n    for (let extractResponse of extractResponses) {\n      let labelEntities = this.ToLabeledEntities(extractResponse.predictedEntities)\n      let textVariation: TextVariation = {\n        text: extractResponse.text,\n        labelEntities: labelEntities\n      }\n      textVariations.push(textVariation)\n    }\n    return textVariations\n  }\n\n  //====================================================================\n  // CONVERSION: LogDialog == TrainDialog\n  //====================================================================\n  public static ToTrainDialog(\n    logDialog: LogDialog,\n    actions: ActionBase[] | null = null,\n    entities: EntityBase[] | null = null\n  ): TrainDialog {\n    let trainRounds: TrainRound[] = []\n    for (let logRound of logDialog.rounds) {\n      let trainRound = ModelUtils.ToTrainRound(logRound)\n      trainRounds.push(trainRound)\n    }\n\n    let appDefinition: AppDefinition | null = null\n    if (entities != null && actions != null) {\n      appDefinition = {\n        entities,\n        actions,\n        trainDialogs: []\n      }\n    }\n\n    return {\n      createdDateTime: logDialog.createdDateTime,\n      lastModifiedDateTime: logDialog.lastModifiedDateTime,\n      packageCreationId: 0,\n      packageDeletionId: 0,\n      trainDialogId: '',\n      sourceLogDialogId: logDialog.logDialogId,\n      version: 0,\n      rounds: trainRounds,\n      definitions: appDefinition,\n      initialFilledEntities: logDialog.initialFilledEntities\n    }\n  }\n\n  //====================================================================\n  // CONVERSION: LogRoung == TrainRound\n  //====================================================================\n  public static ToTrainRound(logRound: LogRound): TrainRound {\n    return {\n      extractorStep: {\n        textVariations: [\n          {\n            labelEntities: ModelUtils.ToLabeledEntities(logRound.extractorStep.predictedEntities),\n            text: logRound.extractorStep.text\n          }\n        ]\n      },\n      scorerSteps: logRound.scorerSteps.map<TrainScorerStep>(logScorerStep => ({\n        input: logScorerStep.input,\n        labelAction: logScorerStep.predictedAction,\n        logicResult: undefined,\n        scoredAction: undefined\n      }))\n    }\n  }\n\n  //====================================================================\n  // CONVERSION: LogScorerStep == TrainScorerStep\n  //====================================================================\n  public static ToTrainScorerStep(logScorerStep: LogScorerStep): TrainScorerStep {\n    return {\n      input: logScorerStep.input,\n      labelAction: logScorerStep.predictedAction,\n      logicResult: undefined,\n      scoredAction: undefined\n    }\n  }\n\n  //====================================================================\n  // CONVERSION: TrainDialog == CreateTeachParams\n  //====================================================================\n  public static ToCreateTeachParams(trainDialog: TrainDialog): CreateTeachParams {\n    let createTeachParams: CreateTeachParams = {\n      contextDialog: trainDialog.rounds,\n      sourceLogDialogId: trainDialog.sourceLogDialogId,\n      initialFilledEntities: trainDialog.initialFilledEntities\n    }\n\n    // TODO: Change to non destructive operation\n    // Strip out \"entityType\" (*sigh*)\n    for (let round of createTeachParams.contextDialog) {\n      for (let textVariation of round.extractorStep.textVariations) {\n        for (let labeledEntity of textVariation.labelEntities) {\n          delete (labeledEntity as any).entityType\n        }\n      }\n    }\n    return createTeachParams\n  }\n\n  //====================================================================\n  // CONVERSION: TeachResponse == Teach\n  //====================================================================\n  public static ToTeach(teachResponse: TeachResponse): Teach {\n    return {\n      teachId: teachResponse.teachId,\n      trainDialogId: teachResponse.trainDialogId,\n      createdDatetime: undefined,\n      lastQueryDatetime: undefined,\n      packageId: undefined\n    }\n  }\n\n  //====================================================================\n  // Misc utils shared between SDK and UI\n  //====================================================================\n  /* Converts user intput into BB.Activity */\n  public static InputToActivity(userText: string, userName: string, userId: string, roundNum: number): any {\n    // Generate activity\n    return {\n      id: this.generateGUID(),\n      from: { id: userId, name: userName },\n      channelData: {\n        senderType: SenderType.User,\n        roundIndex: roundNum,\n        scoreIndex: 0,\n        clientActivityId: this.generateGUID()\n      },\n      type: 'message',\n      text: userText\n    }\n  }\n\n  public static PrebuiltDisplayText(builtinType: string, resolution: any, entityText: string): string {\n    if (!builtinType || !resolution) {\n      return entityText\n    }\n\n    if (['builtin.geography', 'builtin.encyclopedia'].some(prefix => builtinType.startsWith(prefix))) {\n      return entityText\n    }\n\n    switch (builtinType) {\n      case 'builtin.datetimeV2.date':\n        let date = resolution.values[0].value\n        if (resolution.values[1]) {\n          date += ` or ${resolution.values[1].value}`\n        }\n        return date\n      case 'builtin.datetimeV2.time':\n        let time = resolution.values[0].value\n        if (resolution.values[1]) {\n          time += ` or ${resolution.values[1].value}`\n        }\n        return time\n      case 'builtin.datetimeV2.daterange':\n        return `${resolution.values[0].start} to ${resolution.values[0].end}`\n      case 'builtin.datetimeV2.timerange':\n        return `${resolution.values[0].start} to ${resolution.values[0].end}`\n      case 'builtin.datetimeV2.datetimerange':\n        return `${resolution.values[0].start} to ${resolution.values[0].end}`\n      case 'builtin.datetimeV2.duration':\n        return `${resolution.values[0].value} seconds`\n      case 'builtin.datetimeV2.set':\n        return `${resolution.values[0].value}`\n      case 'builtin.number':\n        return resolution.value\n      case 'builtin.ordinal':\n        return resolution.value\n      case 'builtin.temperature':\n        return resolution.value\n      case 'builtin.dimension':\n        return resolution.value\n      case 'builtin.money':\n        return resolution.value\n      case 'builtin.age':\n        return resolution.value\n      case 'builtin.percentage':\n        return resolution.value\n      default:\n        return entityText\n    }\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { MemoryValue } from './Memory'\nimport { ModelUtils } from './ModelUtils'\nimport { EntityBase } from './Entity'\n\nconst SUBSTITUTE_PREFIX = '$'\n\nexport interface FilledEntity {\n  entityId: string | null\n  values: MemoryValue[]\n}\n\nexport const filledEntityValueAsString = (fe: FilledEntity): string => memoryValuesAsString(fe.values)\n\nexport const memoryValuesAsString = (memories: MemoryValue[]): string => {\n  // Print out list in friendly manner\n  let group = ''\n  for (let key in memories) {\n    let index = +key\n    let prefix = ''\n    if (memories.length !== 1 && index === memories.length - 1) {\n      prefix = ' and '\n    } else if (index !== 0) {\n      prefix = ', '\n    }\n    let value = memories[key]\n    let text = value.displayText ? value.displayText : value.userText\n    group += `${prefix}${text}`\n  }\n  return group\n}\n\n// In future will refactor to remove FilledEntityMap, but this method provides abstraction\n// or isolation to methods that would normally consume filledEntityMap to reduce coupling\n// and make code more flexible\nexport const getEntityDisplayValueMap = (filledEntityMap: FilledEntityMap): Map<string, string> => {\n  return Object.keys(filledEntityMap.map).reduce((m, key) => {\n    const entityDisplayValue = filledEntityMap.ValueAsString(key)\n\n    // TODO: Required check because poor API from filledEntityMap which can return null\n    if (entityDisplayValue) {\n      m.set(key, entityDisplayValue)\n    }\n\n    return m\n  }, new Map<string, string>())\n}\n\nexport class FilledEntityMap {\n  public map: { [key: string]: FilledEntity } = {}\n\n  public constructor(init?: Partial<FilledEntityMap>) {\n    Object.assign(this, init)\n  }\n\n  public static FromFilledEntities(filledEntities: FilledEntity[], entities: EntityBase[]) {\n    let filledEntityMap = new FilledEntityMap()\n    for (let filledEntity of filledEntities) {\n      let entity = entities.find(e => e.entityId === filledEntity.entityId)\n      if (entity) {\n        filledEntityMap.map[entity.entityName] = filledEntity\n      }\n    }\n    return filledEntityMap\n  }\n\n  public ValueAsList(entityName: string): string[] {\n    if (!this.map[entityName]) {\n      return []\n    }\n\n    return this.map[entityName].values.filter(v => typeof v.userText === 'string').map(v => v.userText!)\n  }\n\n  public ValueAsString(entityName: string): string | null {\n    if (!this.map[entityName]) {\n      return null\n    }\n\n    // Print out list in friendly manner\n    return filledEntityValueAsString(this.map[entityName])\n  }\n\n  public ValueAsNumber(entityName: string): number | null {\n    const textObj = this.ValueAsString(entityName)\n    let number = Number(textObj)\n    if (isNaN(number)) {\n      return null\n    }\n    return number\n  }\n\n  public ValueAsBoolean(entityName: string): boolean | null {\n    const textObj = this.ValueAsString(entityName)\n    if (textObj) {\n      if (textObj.toLowerCase() === 'true') {\n        return true\n      }\n      if (textObj.toLowerCase() === 'false') {\n        return false\n      }\n    }\n    return null\n  }\n\n  public ValueAsObject<T>(entityName: string): T | null {\n    const textObj = this.ValueAsString(entityName)\n    if (textObj) {\n      return JSON.parse(textObj) as T\n    }\n    return null\n  }\n\n  public ValueAsPrebuilt(entityName: string): MemoryValue[] {\n    if (!this.map[entityName]) {\n      return []\n    }\n    return this.map[entityName].values\n  }\n\n  public Forget(entityName: string, entityValue: string | null = null, isBucket: boolean = false): void {\n    // Check if entity buckets values\n    if (isBucket) {\n      // Entity might not be in memory\n      if (!this.map[entityName]) {\n        return\n      }\n\n      // If no entity Value provide, clear the entity\n      if (!entityValue) {\n        delete this.map[entityName]\n      } else {\n        // Find case insensitive index\n        let lowerCaseNames = this.map[entityName].values.filter(mv => mv.userText).map(mv => mv.userText!.toLowerCase())\n\n        let index = lowerCaseNames.indexOf(entityValue.toLowerCase())\n        if (index > -1) {\n          this.map[entityName].values.splice(index, 1)\n          if (this.map[entityName].values.length === 0) {\n            delete this.map[entityName]\n          }\n        }\n      }\n    } else {\n      delete this.map[entityName]\n    }\n  }\n\n  // Remember multiple values for an entity\n  public RememberMany(\n    entityName: string,\n    entityId: string,\n    entityValues: string[],\n    isBucket: boolean = false,\n    builtinType: string | null = null,\n    resolution: {} | null = null\n  ): void {\n    for (let entityValue of entityValues) {\n      this.Remember(entityName, entityId, entityValue, isBucket, builtinType, resolution)\n    }\n  }\n\n  // Remember value for an entity\n  public Remember(\n    entityName: string,\n    entityId: string,\n    entityValue: string,\n    isBucket: boolean = false,\n    builtinType: string | null = null,\n    resolution: any | null = null\n  ): void {\n    // If we don't already have entry in map for this item, create one\n    if (!this.map[entityName]) {\n      this.map[entityName] = {\n        entityId,\n        values: []\n      }\n    }\n\n    const displayText = builtinType && resolution ? ModelUtils.PrebuiltDisplayText(builtinType, resolution, entityValue) : entityValue\n\n    const newFilledEntityValue = {\n      userText: entityValue,\n      displayText,\n      builtinType,\n      resolution\n    }\n\n    const filledEntity = this.map[entityName]\n    // Check if entity buckets values\n    if (isBucket) {\n      // Add if not a duplicate\n      const containsDuplicateValue = filledEntity.values.some(memoryValue => memoryValue.userText === entityValue)\n      if (!containsDuplicateValue) {\n        filledEntity.values.push(newFilledEntityValue)\n      }\n    } else {\n      filledEntity.values = [newFilledEntityValue]\n    }\n  }\n\n  /** Return FilledEntity array for items I've remembered */\n  public FilledEntities(): FilledEntity[] {\n    return Object.keys(this.map).map(val => {\n      return this.map[val]\n    })\n  }\n\n  public static Split(action: string): string[] {\n    return action.split(/[\\s,:.?!\\[\\]]+/)\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.  \n * Licensed under the MIT License.\n */\nexport class KeyGen {\n  public static MakeKey(address: string) {\n    return this.HashCode(address).toString()\n  }\n\n  private static HashCode(text: string): number {\n    let hash = 0\n    let i = undefined\n    let chr = undefined\n\n    if (text.length === 0) return hash\n    for (i = 0; i < text.length; i++) {\n      chr = text.charCodeAt(i)\n      hash = (hash << 5) - hash + chr\n      hash |= 0 // Convert to 32bit integer\n    }\n    return hash\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nexport enum ReplayErrorType {\n  /* Action does not exist in the model */\n  ActionUndefined = 'ActionUndefined',\n  /* Entity does not exist in the model */\n  EntityUndefined = 'EntityUndefined',\n  /* Entity used in Action but has not value */\n  EntityEmpty = 'EntityEmpty',\n  /* Selected Action is not available with given constraints */\n  ActionUnavailable = 'ActionUnavailable',\n  EntityDiscrepancy = 'EntityDiscrepancy',\n  /* Action in Score Rounds after Wait action */\n  ActionAfterWait = 'ActionAfterWait',\n  /* Two consecutive user inputs */\n  TwoUserInputs = 'TwoUserInputs',\n  /* User input after non-wait */\n  InputAfterNonWait = 'InputAfterNonWait'\n}\n\nexport class ReplayError {\n  constructor(public type: ReplayErrorType) {}\n}\n\nexport class ReplayErrorActionUndefined extends ReplayError {\n  constructor(public lastUserInput: string) {\n    super(ReplayErrorType.ActionUndefined)\n  }\n}\n\nexport class ReplayErrorEntityUndefined extends ReplayError {\n  constructor(public value: string) {\n    super(ReplayErrorType.EntityUndefined)\n  }\n}\n\nexport class ReplayErrorEntityEmpty extends ReplayError {\n  constructor(public values: string[]) {\n    super(ReplayErrorType.EntityEmpty)\n  }\n}\n\nexport class ReplayErrorActionUnavailable extends ReplayError {\n  constructor(public lastUserInput: string) {\n    super(ReplayErrorType.ActionUnavailable)\n  }\n}\n\nexport class ReplayErrorEntityDiscrepancy extends ReplayError {\n  constructor(public lastUserInput: string, public originalEntities: string[], public newEntities: string[]) {\n    super(ReplayErrorType.EntityDiscrepancy)\n  }\n}\n\nexport class ReplayErrorActionAfterWait extends ReplayError {\n  constructor() {\n    super(ReplayErrorType.ActionAfterWait)\n  }\n}\n\nexport class ReplayErrorTwoUserInputs extends ReplayError {\n  constructor() {\n    super(ReplayErrorType.TwoUserInputs)\n  }\n}\n\nexport class ReplayErrorInputAfterNonWait extends ReplayError {\n  constructor() {\n    super(ReplayErrorType.InputAfterNonWait)\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { LogRound } from './LogDialog'\nimport { FilledEntity } from './FilledEntity'\n\nexport enum DialogType {\n  TEACH = 'teach',\n  TRAINDIALOG = 'traindialog',\n  LOGDIALOG = 'logdialog'\n}\n\nexport interface Session {\n  sessionId: string\n  logDialogId: string\n  createdDatetime: string\n  lastQueryDatetime: string\n  packageId: number\n  saveToLog: boolean\n}\n\nexport interface SessionList {\n  sessions: Session[]\n}\n\nexport interface SessionIdList {\n  sessionIds: string[]\n}\n\nexport interface SessionCreateParams {\n  contextDialog?: LogRound[]\n  packageId?: string\n  saveToLog: boolean\n  initialFilledEntities: FilledEntity[]\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { Memory } from './Memory'\nimport { ScoreResponse, ScoreInput } from './Score'\nimport { ReplayError } from './ReplayError'\nimport { UIScoreInput } from './UI'\nimport { ActionBase } from './Action'\nimport { ExtractResponse } from './Extract'\n\nexport enum DialogMode {\n  Extractor = 'Extract', // Waiting for Extractor feedback\n  Scorer = 'Score', // Waiting for Scorer feedback\n  Wait = 'Wait', // Waiting for user input,\n  EndSession = 'EndSession' // Dialog is over - EndSesssion Action has been called\n}\n\nexport interface Teach {\n  teachId: string\n  trainDialogId: string\n  createdDatetime: string | undefined\n  lastQueryDatetime: string | undefined\n  packageId: number | undefined\n}\n\nexport interface TeachResponse {\n  packageId: number\n  teachId: string\n  trainDialogId: string\n}\n\nexport interface TeachList {\n  teaches: Teach[]\n}\n\nexport interface TeachIdList {\n  teachIds: string[]\n}\n\nexport interface TeachWithHistory {\n  teach: Teach | undefined\n  history: any[]\n  memories: Memory[]\n  prevMemories: Memory[]\n  dialogMode: DialogMode\n  scoreResponse: ScoreResponse | undefined\n  scoreInput: ScoreInput | undefined\n  extractResponse: ExtractResponse | undefined\n  uiScoreInput: UIScoreInput | undefined\n  lastAction: ActionBase | null\n  replayErrors: ReplayError[]\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { Memory } from './Memory'\nimport { ScoreInput, ScoreResponse } from './Score'\nimport { TrainExtractorStep, TrainScorerStep } from './TrainDialog'\nimport { EntityBase } from './Entity'\nimport { ExtractResponse } from './Extract'\nimport { TeachResponse } from './Teach'\nimport { AppIdList, AppList } from './App'\n\nexport const CL_USER_NAME_ID = 'CLTrainer'\nexport const MEMORY_KEY_HEADER_NAME = 'x-conversationlearner-memory-key'\n\n/** Indicates whether END_SESSION was called on the running Session */\nexport enum SessionEndState {\n  /** Session ended because END_SESSION activity has been called */\n  COMPLETED = 'completed',\n  /** Session ended because of timeout or new session started w/o END_SESSION activity */\n  OPEN = 'open'\n}\n\nexport enum ScoreReason {\n  // Action has been masked\n  NotAvailable = 'notAvailable',\n\n  // Action can't be scored because it hasn't been trained yet\n  NotScorable = 'notScorable',\n\n  // Score has not yet been calculated\n  NotCalculated = 'notCalculated'\n}\n\nexport interface UIScoreInput {\n  trainExtractorStep: TrainExtractorStep | null\n  extractResponse: ExtractResponse\n}\n\nexport interface UIExtractResponse {\n  extractResponse: ExtractResponse\n  memories: Memory[]\n}\n\nexport interface UIPostScoreResponse {\n  teachResponse: TeachResponse\n  isEndTask: Boolean\n  memories: Memory[]\n}\n\nexport interface UIScoreResponse {\n  scoreResponse: ScoreResponse\n  scoreInput: ScoreInput\n  memories: Memory[]\n}\n\nexport interface UITrainScorerStep {\n  trainScorerStep: TrainScorerStep\n  channelData: {}\n  entities: EntityBase[]\n}\n\nexport interface UIAppList {\n  appList: AppList\n  activeApps: { [appId: string]: string } // appId: packageId\n}\n","/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport EntityIdSerializer from './slateSerializer'\n\nexport * from './Action'\nexport * from './AppDefinition'\nexport * from './App'\nexport * from './Banner'\nexport * from './BotInfo'\nexport * from './Callback'\nexport * from './ChangeEntityResponse'\nexport * from './Entity'\nexport * from './Extract'\nexport * from './DeleteEditResponse'\nexport * from './FilledEntity'\nexport * from './KeyGen'\nexport * from './LogDialog'\nexport * from './Metrics'\nexport * from './Memory'\nexport * from './ModelUtils'\nexport * from './ReplayError'\nexport * from './Score'\nexport * from './Session'\nexport * from './Teach'\nexport * from './Template'\nexport * from './TrainDialog'\nexport * from './UserInput'\nexport * from './UI'\nexport { EntityIdSerializer }\n"],"names":["tslib_1.__extends"],"mappings":"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"}