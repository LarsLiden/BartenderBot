{"version":3,"file":"conversationlearner-models.es5.js","sources":["../src/slateSerializer.ts","../src/Action.ts","../src/App.ts","../src/Entity.ts","../src/FilledEntity.ts","../src/KeyGen.ts","../src/ModelUtils.ts","../src/ReplayError.ts","../src/Session.ts","../src/Teach.ts","../src/TrainDialog.ts","../src/UI.ts","../src/conversationlearner-models.ts"],"sourcesContent":["/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\n// TODO: Copied from ConversationLearner-UI. Need to improve Action design to find out how to consolidate knowledge to single layer\r\n// Originally ConversationLearner-models was intended to know have to understand the tree structure which is why we added the\r\n// pre-serialized 'text' field; however, now can't use the text field becuase it includes entity id's instead of human-readable names\r\n// Instead of having to decide wether to perform substitutions from the serialized text or from the tree it's better to\r\n// just have single method used everywhere\r\n\r\n// Can't import because it's from ConversationLearner-UI\r\n//import { NodeTypes } from \"./models\";\r\nenum NodeTypes {\r\n  Mention = 'mention-inline-node',\r\n  Optional = 'optional-inline-node'\r\n}\r\n\r\n// Based on: https://github.com/ianstormtaylor/slate/blob/master/packages/slate-plain-serializer/src/index.js\r\n\r\nfunction serialize(value: any, entityValuesMap: Map<string, string>, fallbackToOriginal: boolean = false): string {\r\n  const valueAsJson = typeof value.toJSON === 'function' ? value.toJSON() : value\r\n  const processedDocument = removeOptionalNodesWithoutEntityValues(valueAsJson.document, Array.from(entityValuesMap.keys()))\r\n  return serializeNode(processedDocument, entityValuesMap, fallbackToOriginal)\r\n}\r\n\r\n/**\r\n * Given node return filter out optional nodes without matching values provided\r\n * \r\n * E.g. You are welcome[, $name] -> You are welcome\r\n * @param node Slate Node\r\n * @param entityValues Key Value pair of entity id to entity display value\r\n */\r\nfunction removeOptionalNodesWithoutEntityValues(node: any, entityIds: string[]): any | undefined {\r\n  if (node.kind === 'inline' && node.type === NodeTypes.Optional) {\r\n    const entityIdsWithinOptionalNode = getEntityIds(node)\r\n    const hasValues = entityIdsWithinOptionalNode.every(x => entityIds.includes(x))\r\n    return hasValues ? node : undefined\r\n  }\r\n\r\n  if (Array.isArray(node.nodes)) {\r\n    node.nodes = node.nodes.map((n: any) => removeOptionalNodesWithoutEntityValues(n, entityIds)).filter((n: any) => n)\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nfunction getEntityIds(node: any): string[] {\r\n  const entityIds: string[] = []\r\n\r\n  // If current node is inline node which we know to have entityId then save it in the list\r\n  if (node.kind === 'inline' && node.type === NodeTypes.Mention) {\r\n    // This check is required becuase when input is Slate Value node is Immutable.Map object\r\n    // but it could also be a node from value.toJSON()\r\n    const data = typeof node.data.toJS === 'function' ? node.data.toJS() : node.data\r\n    const option = data.option\r\n\r\n    if (!option) {\r\n      throw new Error(`Attempting to serialize inline node but it did not have option`)\r\n    }\r\n\r\n    const entityId = option.id\r\n    entityIds.push(entityId)\r\n  }\r\n\r\n  // Technically this would never get called because inline nodes shouldn't have other children which are inline nodes\r\n  // however, it's good to have working depth-first-traversal anyways\r\n  if (Array.isArray(node.nodes)) {\r\n    const childrenEntityIds: string[] = node.nodes\r\n      .map((n: any) => getEntityIds(n))\r\n      .reduce((totalIds: string[], nodeIds: string[]) => [...totalIds, ...nodeIds], [])\r\n\r\n    entityIds.push(...childrenEntityIds)\r\n  }\r\n\r\n  return entityIds\r\n}\r\n\r\nfunction serializeNode(node: any, entityValues: Map<string, string>, fallbackToOriginal: boolean): string {\r\n  if (node.kind === 'text') {\r\n    return node.leaves.map((n: any) => n.text).join('')\r\n  }\r\n\r\n  const serializedChildNodes = node.nodes.map((n: any) => serializeNode(n, entityValues, fallbackToOriginal))\r\n\r\n  if (node.kind === 'inline' && node.type === NodeTypes.Mention) {\r\n    // This check is required becuase when input is Slate Value node is Immutable.Map object\r\n    // but it could also be a node from value.toJSON()\r\n    const data = typeof node.data.toJS === 'function' ? node.data.toJS() : node.data\r\n    if (!data.completed) {\r\n      return serializedChildNodes.join('')\r\n    }\r\n\r\n    const option = data.option\r\n    if (!option) {\r\n      throw new Error(`Attempting to serialize inline node but it did not have option`)\r\n    }\r\n\r\n    const entityId = option.id\r\n    const mapContainsEntity = entityValues.has(entityId)\r\n    if (!mapContainsEntity) {\r\n      if (fallbackToOriginal) {\r\n        return serializedChildNodes.join('')\r\n      }\r\n\r\n      const entityValuesString = Array.from(entityValues.entries())\r\n        .map(([id, value]) => `${id}: ${value}`)\r\n        .join(', ')\r\n      throw new Error(\r\n        `Inline node representing entity ${entityId} was NOT provided a value in the given entityValue map: [${entityValuesString}]`\r\n      )\r\n    }\r\n\r\n    return entityValues.get(entityId)!\r\n  }\r\n\r\n  if (node.kind === 'document') {\r\n    return serializedChildNodes.join('\\n')\r\n  }\r\n\r\n  const serializedChildren = serializedChildNodes.join('')\r\n\r\n  return node.kind === 'inline' && node.type === NodeTypes.Optional ? serializedChildren.slice(1, -1) : serializedChildren\r\n}\r\n\r\nexport default {\r\n  serialize\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport EntityIdSerializer from './slateSerializer'\r\nimport { ScoredAction } from './Score'\r\n\r\nexport const ActionTypes = {\r\n  TEXT: 'TEXT',\r\n  API_LOCAL: 'API_LOCAL',\r\n  // API_AZURE : \"API_AZURE\", TODO\r\n  CARD: 'CARD'\r\n}\r\n\r\nexport class ActionBase {\r\n  public actionId: string\r\n  public actionType: string\r\n  public payload: string\r\n  public isTerminal: boolean\r\n  public requiredEntities: string[]\r\n  public negativeEntities: string[]\r\n  public suggestedEntity: string | null\r\n  public version: number\r\n  public packageCreationId: number\r\n  public packageDeletionId: number\r\n\r\n  public constructor(init?: Partial<ActionBase>) {\r\n    Object.assign(this, init)\r\n  }\r\n\r\n  // TODO: Refactor away from generic GetPayload for different action types\r\n  // They all return strings but the strings are very different (Text is the substituted values, but other actions dont)\r\n  // This causes issue of having to pass in entityValueMap even when it's not required, but making it optional ruins\r\n  // safety for those places which should require it.\r\n  // TODO: Remove ScoredAction since it doesn't have payload\r\n  public static GetPayload(action: ActionBase | ScoredAction, entityValues: Map<string, string>): string {\r\n    if (action.actionType === ActionTypes.TEXT) {\r\n      /**\r\n       * For backwards compatibility check if payload is of new TextPayload type\r\n       * Ideally we would implement schema refactor:\r\n       * 1. Make payloads discriminated unions (E.g. After checking the action.type, flow control knows the type of the payload property)\r\n       * This removes the need for the GetPayload function and GetArguments which are brittle coding patterns.\r\n       */\r\n      try {\r\n        const textPayload = JSON.parse(action.payload) as TextPayload\r\n        return EntityIdSerializer.serialize(textPayload.json, entityValues)\r\n      } catch (e) {\r\n        const error = e as Error\r\n        throw new Error(\r\n          `Error when attempting to parse text action payload. This might be an old action which was saved as a string.  Please create a new action. ${error.message}`\r\n        )\r\n      }\r\n    }\r\n    if (action.actionType !== ActionTypes.TEXT) {\r\n      let actionPayload = JSON.parse(action.payload) as ActionPayload\r\n      return actionPayload.payload\r\n    }\r\n    return action.payload\r\n  }\r\n\r\n  /** Return arguments for an action */\r\n  public static GetActionArguments(action: ActionBase | ScoredAction): ActionArgument[] {\r\n    if (action.actionType !== ActionTypes.TEXT) {\r\n      let actionPayload = JSON.parse(action.payload) as ActionPayload\r\n      return actionPayload.arguments.map(aa => new ActionArgument(aa))\r\n    }\r\n\r\n    return []\r\n  }\r\n}\r\n\r\nexport interface ActionList {\r\n  actions: ActionBase[]\r\n}\r\n\r\nexport interface ActionIdList {\r\n  actionIds: string[]\r\n}\r\n\r\n// TODO: Remove was originally storing two properties text/json\r\n// but now text is removed and this is only here for backwards compatibility\r\nexport interface TextPayload {\r\n  json: object\r\n}\r\n\r\nexport interface ActionPayload {\r\n  payload: string\r\n  arguments: IActionArgument[]\r\n}\r\n\r\nexport interface IActionArgument {\r\n  parameter: string\r\n  value: TextPayload\r\n}\r\n\r\nexport class ActionArgument {\r\n  parameter: string\r\n  value: object\r\n\r\n  constructor(actionArgument: IActionArgument) {\r\n    this.parameter = actionArgument.parameter\r\n    this.value = actionArgument.value.json\r\n  }\r\n\r\n  renderValue(entityValues: Map<string, string>): string {\r\n    return EntityIdSerializer.serialize(this.value, entityValues)\r\n  }\r\n}\r\n\r\nexport interface RenderedActionArgument {\r\n  parameter: string\r\n  value: string | null\r\n}\r\n\r\nexport class TextAction extends ActionBase {\r\n  value: object // json slate value\r\n\r\n  constructor(action: ActionBase) {\r\n    super(action)\r\n\r\n    if (action.actionType !== ActionTypes.TEXT) {\r\n      throw new Error(`You attempted to create text action from action of type: ${action.actionType}`)\r\n    }\r\n\r\n    this.value = JSON.parse(this.payload).json\r\n  }\r\n\r\n  renderValue(entityValues: Map<string, string>): string {\r\n    return EntityIdSerializer.serialize(this.value, entityValues)\r\n  }\r\n}\r\n\r\nexport class ApiAction extends ActionBase {\r\n  name: string\r\n  arguments: ActionArgument[]\r\n\r\n  constructor(action: ActionBase) {\r\n    super(action)\r\n\r\n    if (action.actionType !== ActionTypes.API_LOCAL) {\r\n      throw new Error(`You attempted to create api action from action of type: ${action.actionType}`)\r\n    }\r\n\r\n    const actionPayload: ActionPayload = JSON.parse(this.payload)\r\n    this.name = actionPayload.payload\r\n    this.arguments = actionPayload.arguments.map(aa => new ActionArgument(aa))\r\n  }\r\n\r\n  renderArguments(entityValues: Map<string, string>): RenderedActionArgument[] {\r\n    return this.arguments.map(aa => {\r\n      let value = null\r\n      try {\r\n        value = EntityIdSerializer.serialize(aa.value, entityValues)\r\n      } catch (error) {\r\n        // Just return null if argument doesn't have a value\r\n      }\r\n\r\n      return {\r\n        ...aa,\r\n        value: value\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport class CardAction extends ActionBase {\r\n  templateName: string\r\n  arguments: ActionArgument[]\r\n\r\n  constructor(action: ActionBase) {\r\n    super(action)\r\n\r\n    if (action.actionType !== ActionTypes.CARD) {\r\n      throw new Error(`You attempted to create card action from action of type: ${action.actionType}`)\r\n    }\r\n\r\n    const actionPayload: ActionPayload = JSON.parse(this.payload)\r\n    this.templateName = actionPayload.payload\r\n    this.arguments = actionPayload.arguments.map(aa => new ActionArgument(aa))\r\n  }\r\n\r\n  renderArguments(entityValues: Map<string, string>): RenderedActionArgument[] {\r\n    return this.arguments.map(aa => {\r\n      let value = null\r\n      try {\r\n        value = EntityIdSerializer.serialize(aa.value, entityValues)\r\n      } catch (error) {\r\n        // Just return null if argument doesn't have a value\r\n      }\r\n\r\n      return {\r\n        ...aa,\r\n        value: value\r\n      }\r\n    })\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nexport interface AppMetaData {\r\n  botFrameworkApps: string[]\r\n  markdown: string\r\n  video: string\r\n  isLoggingOn: boolean\r\n}\r\n\r\nexport interface AppBase {\r\n  appName: string\r\n  appId: string\r\n  locale: string\r\n  luisAppId: string\r\n  metadata: AppMetaData\r\n  trainingFailureMessage: string\r\n  trainingStatus: TrainingStatusCode\r\n  datetime: Date\r\n  packageVersions?: PackageReference[]\r\n  livePackageId?: string\r\n  devPackageId?: string\r\n}\r\n\r\nexport interface AppList {\r\n  apps: AppBase[]\r\n}\r\n\r\nexport interface AppIdList {\r\n  appIds: string[]\r\n}\r\n\r\nexport enum TrainingStatusCode {\r\n  Queued = 'queued',\r\n  Running = 'running',\r\n  Completed = 'completed',\r\n  Failed = 'failed'\r\n}\r\n\r\nexport interface TrainingStatus {\r\n  trainingStatus: TrainingStatusCode\r\n  trainingFailureMessage: string | null | undefined\r\n}\r\n\r\nexport interface PackageReference {\r\n  packageId: string\r\n  packageVersion: string\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nexport enum EntityType {\r\n  LOCAL = 'LOCAL',\r\n  LUIS = 'LUIS'\r\n}\r\n\r\nexport const makeNegative = (entity: EntityBase, positiveId: string): EntityBase => ({\r\n  ...entity,\r\n  negativeId: null,\r\n  positiveId\r\n})\r\n\r\nexport interface EntityBase {\r\n  entityId: string\r\n  entityName: string\r\n  entityType: string\r\n  version: number | null\r\n  packageCreationId: number | null\r\n  packageDeletionId: number | null\r\n\r\n  isMultivalue: boolean\r\n\r\n  /** If set, has a negative and positive version */\r\n  isNegatible: boolean\r\n\r\n  /** If Negatable, the Id of negative entity associates with this Entity */\r\n  negativeId: string | null\r\n\r\n  /** If a Negative, Id of positive entity associated with this Entity */\r\n  positiveId: string | null\r\n}\r\n\r\nexport interface LabeledEntity {\r\n  entityId: string\r\n  startCharIndex: number\r\n  endCharIndex: number\r\n  entityText: string\r\n  resolution: {}\r\n  builtinType: string\r\n}\r\n\r\nexport interface PredictedEntity extends LabeledEntity {\r\n  score: number | undefined\r\n}\r\n\r\nexport interface EntityList {\r\n  entities: EntityBase[]\r\n}\r\n\r\nexport interface EntityIdList {\r\n  entityIds: string[]\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { MemoryValue } from './Memory'\r\n\r\nconst SUBSTITUTE_PREFIX = '$'\r\n\r\nexport interface FilledEntity {\r\n  entityId: string | null\r\n  values: MemoryValue[]\r\n}\r\n\r\nexport const filledEntityValueAsString = (fe: FilledEntity): string => {\r\n  // Print out list in friendly manner\r\n  let group = ''\r\n  for (let key in fe.values) {\r\n    let index = +key\r\n    let prefix = ''\r\n    if (fe.values.length !== 1 && index === fe.values.length - 1) {\r\n      prefix = ' and '\r\n    } else if (index !== 0) {\r\n      prefix = ', '\r\n    }\r\n    let value = fe.values[key]\r\n    let text = value.displayText ? value.displayText : value.userText\r\n    group += `${prefix}${text}`\r\n  }\r\n  return group\r\n}\r\n\r\n// In future will refactor to remove FilledEntityMap, but this method provides abstraction\r\n// or isolation to methods that would normally consume filledEntityMap to reduce coupling\r\n// and make code more flexible\r\nexport const getEntityDisplayValueMap = (filledEntityMap: FilledEntityMap): Map<string, string> => {\r\n  return Object.keys(filledEntityMap.map).reduce((m, key) => {\r\n    const entityDisplayValue = filledEntityMap.EntityValueAsString(key)\r\n\r\n    // TODO: Required check because poor API from filledEntityMap which can return null\r\n    if (entityDisplayValue) {\r\n      m.set(key, entityDisplayValue)\r\n    }\r\n\r\n    return m\r\n  }, new Map<string, string>())\r\n}\r\n\r\n// TODO: Refactor to native Map\r\nexport class FilledEntityMap {\r\n  public map: { [key: string]: FilledEntity } = {}\r\n\r\n  public constructor(init?: Partial<FilledEntityMap>) {\r\n    Object.assign(this, init)\r\n  }\r\n\r\n  public EntityValueAsList(entityName: string): string[] {\r\n    if (!this.map[entityName]) {\r\n      return []\r\n    }\r\n\r\n    return this.map[entityName].values.filter(v => typeof v.userText === 'string').map(v => v.userText!)\r\n  }\r\n\r\n  public EntityValueAsString(entityName: string): string | null {\r\n    if (!this.map[entityName]) {\r\n      return null\r\n    }\r\n\r\n    // Print out list in friendly manner\r\n    return filledEntityValueAsString(this.map[entityName])\r\n  }\r\n\r\n  public static Split(action: string): string[] {\r\n    return action.split(/[\\s,:.?!\\[\\]]+/)\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nexport class KeyGen {\r\n  public static MakeKey(address: string) {\r\n    return this.HashCode(address).toString()\r\n  }\r\n\r\n  private static HashCode(text: string): number {\r\n    let hash = 0\r\n    let i = undefined\r\n    let chr = undefined\r\n\r\n    if (text.length === 0) return hash\r\n    for (i = 0; i < text.length; i++) {\r\n      chr = text.charCodeAt(i)\r\n      hash = (hash << 5) - hash + chr\r\n      hash |= 0 // Convert to 32bit integer\r\n    }\r\n    return hash\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { ExtractResponse } from './Extract'\r\nimport { Teach, TeachResponse } from './Teach'\r\nimport { TrainRound, TrainDialog, TrainExtractorStep, TrainScorerStep, TextVariation, CreateTeachParams } from './TrainDialog'\r\nimport { LogDialog, LogRound, LogScorerStep } from './LogDialog'\r\nimport { EntityList, EntityBase, LabeledEntity, PredictedEntity } from './Entity'\r\nimport { ActionBase } from './Action'\r\nimport { AppDefinition } from './AppDefinition'\r\n\r\nexport class ModelUtils {\r\n  /** Remove n words from start of string */\r\n  public static RemoveWords(text: string, numWords: number): string {\r\n    if (text.length === 0 || numWords === 0) {\r\n      return text\r\n    }\r\n\r\n    const firstSpace = text.indexOf(' ')\r\n    const remaining = firstSpace > 0 ? text.slice(firstSpace + 1) : ''\r\n    numWords--\r\n\r\n    return this.RemoveWords(remaining, numWords)\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: LabeledEntity == PredictedEntity\r\n  //====================================================================\r\n  public static ToLabeledEntity(predictedEntity: PredictedEntity): LabeledEntity {\r\n    const { score, ...labeledEntity } = predictedEntity\r\n    return predictedEntity\r\n  }\r\n\r\n  public static ToLabeledEntities(predictedEntities: PredictedEntity[]): LabeledEntity[] {\r\n    let labeledEntities: LabeledEntity[] = []\r\n    for (let predictedEntity of predictedEntities) {\r\n      let labelEntity = ModelUtils.ToLabeledEntity(predictedEntity)\r\n      labeledEntities.push(labelEntity)\r\n    }\r\n    return labeledEntities\r\n  }\r\n\r\n  public static ToPredictedEntity(labeledEntity: LabeledEntity): PredictedEntity {\r\n    return {\r\n      ...labeledEntity,\r\n      score: undefined\r\n    }\r\n  }\r\n\r\n  public static ToPredictedEntities(labeledEntities: LabeledEntity[]): PredictedEntity[] {\r\n    let predictedEntities: PredictedEntity[] = []\r\n    for (let labeledEntity of labeledEntities) {\r\n      let predictedEntity = ModelUtils.ToPredictedEntity(labeledEntity)\r\n      predictedEntities.push(predictedEntity)\r\n    }\r\n    return predictedEntities\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: ExtractResponse == TextVariation\r\n  //====================================================================\r\n  public static ToTextVariation(extractResponse: ExtractResponse): TextVariation {\r\n    let labeledEntities = this.ToLabeledEntities(extractResponse.predictedEntities)\r\n    let textVariation = {\r\n      text: extractResponse.text,\r\n      labelEntities: labeledEntities\r\n    }\r\n    return textVariation\r\n  }\r\n\r\n  public static ToExtractResponses(textVariations: TextVariation[]): ExtractResponse[] {\r\n    let extractResponses: ExtractResponse[] = []\r\n    for (let textVariation of textVariations) {\r\n      let predictedEntities = this.ToPredictedEntities(textVariation.labelEntities)\r\n      let extractResponse: ExtractResponse = {\r\n        definitions: {\r\n          entities: [],\r\n          actions: [],\r\n          trainDialogs: []\r\n        },\r\n        packageId: '',\r\n        metrics: {\r\n          wallTime: 0\r\n        },\r\n        text: textVariation.text,\r\n        predictedEntities: predictedEntities\r\n      }\r\n      extractResponses.push(extractResponse)\r\n    }\r\n    return extractResponses\r\n  }\r\n\r\n  public static ToTextVariations(extractResponses: ExtractResponse[]): TextVariation[] {\r\n    let textVariations: TextVariation[] = []\r\n    for (let extractResponse of extractResponses) {\r\n      let labelEntities = this.ToLabeledEntities(extractResponse.predictedEntities)\r\n      let textVariation: TextVariation = {\r\n        text: extractResponse.text,\r\n        labelEntities: labelEntities\r\n      }\r\n      textVariations.push(textVariation)\r\n    }\r\n    return textVariations\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: LogDialog == TrainDialog\r\n  //====================================================================\r\n  public static ToTrainDialog(\r\n    logDialog: LogDialog,\r\n    actions: ActionBase[] | null = null,\r\n    entities: EntityBase[] | null = null\r\n  ): TrainDialog {\r\n    let trainRounds: TrainRound[] = []\r\n    for (let logRound of logDialog.rounds) {\r\n      let trainRound = ModelUtils.ToTrainRound(logRound)\r\n      trainRounds.push(trainRound)\r\n    }\r\n\r\n    let appDefinition: AppDefinition | null = null\r\n    if (entities != null && actions != null) {\r\n      appDefinition = {\r\n        entities,\r\n        actions,\r\n        trainDialogs: []\r\n      }\r\n    }\r\n\r\n    return {\r\n      packageCreationId: 0,\r\n      packageDeletionId: 0,\r\n      trainDialogId: '',\r\n      sourceLogDialogId: logDialog.logDialogId,\r\n      version: 0,\r\n      rounds: trainRounds,\r\n      definitions: appDefinition\r\n    }\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: LogRoung == TrainRound\r\n  //====================================================================\r\n  public static ToTrainRound(logRound: LogRound): TrainRound {\r\n    return {\r\n      extractorStep: {\r\n        textVariations: [\r\n          {\r\n            labelEntities: ModelUtils.ToLabeledEntities(logRound.extractorStep.predictedEntities),\r\n            text: logRound.extractorStep.text\r\n          }\r\n        ]\r\n      },\r\n      scorerSteps: logRound.scorerSteps.map<TrainScorerStep>(logScorerStep => ({\r\n        input: logScorerStep.input,\r\n        labelAction: logScorerStep.predictedAction,\r\n        scoredAction: undefined\r\n      }))\r\n    }\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: LogScorerStep == TrainScorerStep\r\n  //====================================================================\r\n  public static ToTrainScorerStep(logScorerStep: LogScorerStep): TrainScorerStep {\r\n    return {\r\n      input: logScorerStep.input,\r\n      labelAction: logScorerStep.predictedAction,\r\n      scoredAction: undefined\r\n    }\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: TrainDialog == CreateTeachParams\r\n  //====================================================================\r\n  public static ToCreateTeachParams(trainDialog: TrainDialog): CreateTeachParams {\r\n    let createTeachParams: CreateTeachParams = {\r\n      contextDialog: trainDialog.rounds,\r\n      sourceLogDialogId: trainDialog.sourceLogDialogId\r\n    }\r\n\r\n    // TODO: Change to non destructive operation\r\n    // Strip out \"entityType\" (*sigh*)\r\n    for (let round of createTeachParams.contextDialog) {\r\n      for (let textVariation of round.extractorStep.textVariations) {\r\n        for (let labeledEntity of textVariation.labelEntities) {\r\n          delete (labeledEntity as any).entityType\r\n        }\r\n      }\r\n    }\r\n    return createTeachParams\r\n  }\r\n\r\n  //====================================================================\r\n  // CONVERSION: TeachResponse == Teach\r\n  //====================================================================\r\n  public static ToTeach(teachResponse: TeachResponse): Teach {\r\n    return {\r\n      teachId: teachResponse.teachId,\r\n      trainDialogId: teachResponse.trainDialogId,\r\n      createdDatetime: undefined,\r\n      lastQueryDatetime: undefined,\r\n      packageId: undefined\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nexport enum ReplayErrorType {\r\n  MissingAction = 'MissingAcion',\r\n  MissingEntity = 'MissingEntity',\r\n  ActionUnavailable = 'ActionUnavailable',\r\n  EntityDiscrepancy = 'EntityDiscrepancy'\r\n}\r\n\r\nexport class ReplayError {\r\n  constructor(public type: ReplayErrorType) {}\r\n}\r\n\r\nexport class ReplayErrorMissingAction extends ReplayError {\r\n  constructor(public lastUserInput: string) {\r\n    super(ReplayErrorType.MissingAction)\r\n  }\r\n}\r\n\r\nexport class ReplayErrorMissingEntity extends ReplayError {\r\n  constructor(public value: string) {\r\n    super(ReplayErrorType.MissingEntity)\r\n  }\r\n}\r\n\r\nexport class ReplayErrorActionUnavailable extends ReplayError {\r\n  constructor(public lastUserInput: string) {\r\n    super(ReplayErrorType.ActionUnavailable)\r\n  }\r\n}\r\n\r\nexport class ReplayErrorEntityDiscrepancy extends ReplayError {\r\n  constructor(public lastUserInput: string, public originalEntities: string[], public newEntities: string[]) {\r\n    super(ReplayErrorType.EntityDiscrepancy)\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { LogRound } from './LogDialog'\r\n\r\nexport enum DialogType {\r\n  TEACH = 'teach',\r\n  TRAINDIALOG = 'traindialog',\r\n  LOGDIALOG = 'logdialog'\r\n}\r\n\r\nexport interface Session {\r\n  sessionId: string\r\n  logDialogId: string\r\n  createdDatetime: string\r\n  lastQueryDatetime: string\r\n  packageId: number\r\n  saveToLog: boolean\r\n}\r\n\r\nexport interface SessionList {\r\n  sessions: Session[]\r\n}\r\n\r\nexport interface SessionIdList {\r\n  sessionIds: string[]\r\n}\r\n\r\nexport interface SessionCreateParams {\r\n  contextDialog?: LogRound[]\r\n  packageId?: string\r\n  saveToLog: boolean\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { Memory } from './Memory'\r\nimport { ScoreResponse, ScoreInput } from './Score'\r\nimport { ReplayError } from './ReplayError'\r\n\r\nexport enum DialogMode {\r\n  Extractor = 'Extract', // Waiting for Extractor feedback\r\n  Scorer = 'Score', // Waiting for Scorer feedback\r\n  Wait = 'Wait' // Waiting for user input\r\n}\r\n\r\nexport interface Teach {\r\n  teachId: string\r\n  trainDialogId: string\r\n  createdDatetime: string | undefined\r\n  lastQueryDatetime: string | undefined\r\n  packageId: number | undefined\r\n}\r\n\r\nexport interface TeachResponse {\r\n  packageId: number\r\n  teachId: string\r\n  trainDialogId: string\r\n}\r\n\r\nexport interface TeachList {\r\n  teaches: Teach[]\r\n}\r\n\r\nexport interface TeachIdList {\r\n  teachIds: string[]\r\n}\r\n\r\nexport interface TeachWithHistory {\r\n  teach: Teach | undefined\r\n  history: any[]\r\n  memories: Memory[]\r\n  prevMemories: Memory[]\r\n  dialogMode: DialogMode\r\n  scoreResponse: ScoreResponse | undefined\r\n  scoreInput: ScoreInput | undefined\r\n  replayErrors: ReplayError[]\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { ScoreInput, ScoredAction } from './Score'\r\nimport { LabeledEntity } from './Entity'\r\nimport { AppDefinition } from './AppDefinition'\r\n\r\nexport enum SenderType {\r\n  User = 0,\r\n  Bot = 1\r\n}\r\n\r\nexport interface TextVariation {\r\n  text: string\r\n  labelEntities: LabeledEntity[]\r\n}\r\n\r\nexport interface TrainExtractorStep {\r\n  textVariations: TextVariation[]\r\n}\r\n\r\nexport interface TrainScorerStep {\r\n  input: ScoreInput\r\n  // I'd of the selected action\r\n  labelAction: string\r\n  // Score of the selected action\r\n  scoredAction: ScoredAction | undefined\r\n}\r\n\r\nexport interface TrainRound {\r\n  extractorStep: TrainExtractorStep\r\n  scorerSteps: TrainScorerStep[]\r\n}\r\n\r\nexport interface TrainDialog {\r\n  trainDialogId: string\r\n  sourceLogDialogId: string\r\n  version: number\r\n  packageCreationId: number\r\n  packageDeletionId: number\r\n  rounds: TrainRound[]\r\n  definitions?: AppDefinition | null\r\n  invalid?: boolean\r\n}\r\n\r\nexport interface TrainResponse {\r\n  packageId: number\r\n  trainingStatus: string\r\n  trainDialogId: string\r\n}\r\n\r\nexport interface TrainDialogList {\r\n  trainDialogs: TrainDialog[]\r\n  definitions?: AppDefinition\r\n}\r\n\r\nexport interface TrainDialogIdList {\r\n  trainDialogIds: string[]\r\n}\r\n\r\nexport interface CreateTeachParams {\r\n  contextDialog: TrainRound[]\r\n  sourceLogDialogId?: string\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport { Memory } from './Memory'\r\nimport { ScoreInput, ScoreResponse } from './Score'\r\nimport { TrainExtractorStep, TrainScorerStep } from './TrainDialog'\r\nimport { EntityBase } from './Entity'\r\nimport { ExtractResponse } from './Extract'\r\nimport { TeachResponse } from './Teach'\r\nimport { AppIdList, AppList } from './App'\r\n\r\nexport const CL_USER_NAME_ID = 'CLTrainer'\r\nexport const MEMORY_KEY_HEADER_NAME = 'x-conversationlearner-memory-key'\r\n\r\nexport enum ScoreReason {\r\n  // Action has been masked\r\n  NotAvailable = 'notAvailable',\r\n\r\n  // Action can't be scored because it hasn't been trained yet\r\n  NotScorable = 'notScorable',\r\n\r\n  // Score has not yet been calculated\r\n  NotCalculated = 'notCalculated'\r\n}\r\n\r\nexport interface UIScoreInput {\r\n  trainExtractorStep: TrainExtractorStep\r\n  extractResponse: ExtractResponse\r\n}\r\n\r\nexport interface UIExtractResponse {\r\n  extractResponse: ExtractResponse\r\n  memories: Memory[]\r\n}\r\n\r\nexport interface UITeachResponse {\r\n  teachResponse: TeachResponse\r\n  memories: Memory[]\r\n}\r\n\r\nexport interface UIScoreResponse {\r\n  scoreResponse: ScoreResponse\r\n  scoreInput: ScoreInput\r\n  memories: Memory[]\r\n}\r\n\r\nexport interface UITrainScorerStep {\r\n  trainScorerStep: TrainScorerStep\r\n  entities: EntityBase[]\r\n}\r\n\r\nexport interface UIAppList {\r\n  appList: AppList\r\n  activeApps: { [appId: string]: string } // appId: packageId\r\n}\r\n","/**\r\n * Copyright (c) Microsoft Corporation. All rights reserved.  \r\n * Licensed under the MIT License.\r\n */\r\nimport EntityIdSerializer from './slateSerializer'\r\n\r\nexport * from './Action'\r\nexport * from './AppDefinition'\r\nexport * from './App'\r\nexport * from './BotInfo'\r\nexport * from './CallbackAPI'\r\nexport * from './Entity'\r\nexport * from './Extract'\r\nexport * from './DeleteEditResponse'\r\nexport * from './FilledEntity'\r\nexport * from './KeyGen'\r\nexport * from './LogDialog'\r\nexport * from './Metrics'\r\nexport * from './Memory'\r\nexport * from './ModelUtils'\r\nexport * from './ReplayError'\r\nexport * from './Score'\r\nexport * from './Session'\r\nexport * from './Teach'\r\nexport * from './Template'\r\nexport * from './TrainDialog'\r\nexport * from './UserInput'\r\nexport * from './UI'\r\nexport { EntityIdSerializer }\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}