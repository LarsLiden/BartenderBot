/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { IOptions } from './slateSerializer';
import { ScoredAction } from './Score';
export declare enum ActionTypes {
    TEXT = "TEXT",
    API_LOCAL = "API_LOCAL",
    CARD = "CARD",
    END_SESSION = "END_SESSION",
}
export declare class ActionBase {
    actionId: string;
    actionType: ActionTypes;
    createdDateTime: string;
    payload: string;
    isTerminal: boolean;
    requiredEntitiesFromPayload: string[];
    requiredEntities: string[];
    negativeEntities: string[];
    suggestedEntity: string | null;
    version: number;
    packageCreationId: number;
    packageDeletionId: number;
    constructor(action: ActionBase);
    static GetPayload(action: ActionBase | ScoredAction, entityValues: Map<string, string>): string;
    /** Return arguments for an action */
    static GetActionArguments(action: ActionBase | ScoredAction): ActionArgument[];
}
export interface ActionList {
    actions: ActionBase[];
}
export interface ActionIdList {
    actionIds: string[];
}
export interface TextPayload {
    json: object;
}
export interface ActionPayloadSingleArguments {
    payload: string;
    arguments: IActionArgument[];
}
export interface ActionPayload {
    payload: string;
    logicArguments: IActionArgument[];
    renderArguments: IActionArgument[];
}
export interface CardPayload {
    payload: string;
    arguments: IActionArgument[];
}
export interface IActionArgument {
    parameter: string;
    value: TextPayload;
}
export declare class ActionArgument {
    parameter: string;
    value: object;
    constructor(actionArgument: IActionArgument);
    renderValue(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): string;
}
export interface RenderedActionArgument {
    parameter: string;
    value: string | null;
}
export declare class TextAction extends ActionBase {
    value: object;
    constructor(action: ActionBase);
    renderValue(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): string;
}
export declare class ApiAction extends ActionBase {
    name: string;
    logicArguments: ActionArgument[];
    renderArguments: ActionArgument[];
    constructor(action: ActionBase);
    renderLogicArguments(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): RenderedActionArgument[];
    renderRenderArguments(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): RenderedActionArgument[];
    private renderArgs(args, entityValues, serializerOptions?);
}
export declare class CardAction extends ActionBase {
    templateName: string;
    arguments: ActionArgument[];
    constructor(action: ActionBase);
    renderArguments(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): RenderedActionArgument[];
}
export declare class SessionAction extends ActionBase {
    value: object;
    constructor(action: ActionBase);
    renderValue(entityValues: Map<string, string>, serializerOptions?: Partial<IOptions>): string;
}
