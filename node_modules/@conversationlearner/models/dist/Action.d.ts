import { ScoredAction } from './Score';
export declare const ActionTypes: {
    TEXT: string;
    API_LOCAL: string;
    CARD: string;
};
export declare class ActionBase {
    actionId: string;
    actionType: string;
    payload: string;
    isTerminal: boolean;
    requiredEntities: string[];
    negativeEntities: string[];
    suggestedEntity: string | null;
    version: number;
    packageCreationId: number;
    packageDeletionId: number;
    constructor(init?: Partial<ActionBase>);
    static GetPayload(action: ActionBase | ScoredAction, entityValues: Map<string, string>): string;
    /** Return arguments for an action */
    static GetActionArguments(action: ActionBase | ScoredAction): ActionArgument[];
}
export interface ActionList {
    actions: ActionBase[];
}
export interface ActionIdList {
    actionIds: string[];
}
export interface TextPayload {
    json: object;
}
export interface ActionPayload {
    payload: string;
    arguments: IActionArgument[];
}
export interface IActionArgument {
    parameter: string;
    value: TextPayload;
}
export declare class ActionArgument {
    parameter: string;
    value: object;
    constructor(actionArgument: IActionArgument);
    renderValue(entityValues: Map<string, string>): string;
}
export interface RenderedActionArgument {
    parameter: string;
    value: string | null;
}
export declare class TextAction extends ActionBase {
    value: object;
    constructor(action: ActionBase);
    renderValue(entityValues: Map<string, string>): string;
}
export declare class ApiAction extends ActionBase {
    name: string;
    arguments: ActionArgument[];
    constructor(action: ActionBase);
    renderArguments(entityValues: Map<string, string>): RenderedActionArgument[];
}
export declare class CardAction extends ActionBase {
    templateName: string;
    arguments: ActionArgument[];
    constructor(action: ActionBase);
    renderArguments(entityValues: Map<string, string>): RenderedActionArgument[];
}
