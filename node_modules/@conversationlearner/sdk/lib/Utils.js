"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const request = require("request");
const semver = require("semver");
const fs = require("fs-extra");
const path = require("path");
const models_1 = require("@conversationlearner/models");
class Utils {
    static SendTyping(adapter, address) {
        /* TODO
        let msg = <builder.IMessage>{ type: 'typing'};
        msg.address = address;
        bot.post(msg);
        */
    }
    /** Trick to get errors to render on Azure */
    static ReplaceErrors(key, value) {
        if (value instanceof Error) {
            const error = {};
            Object.getOwnPropertyNames(value).forEach(k => {
                error[k] = value[k];
            });
            return error;
        }
        return value;
    }
    /** Handle that catch clauses can be any type */
    static ErrorString(error, context = '') {
        let prefix = context ? `${context}: ` : '';
        try {
            if (!error) {
                return prefix + 'Unknown';
            }
            // Special message for 403 as it's like a bad ModelId
            else if (error.statusCode === 403) {
                return `403 Forbidden:  Please check you have set a valid CONVERSATION_LEARNER_MODEL_ID`;
            }
            else if (!error.body) {
                if (typeof error == 'string') {
                    return prefix + error;
                }
                else {
                    return prefix + JSON.stringify(error, this.ReplaceErrors);
                }
            }
            else if (error.body.message) {
                return prefix + error.body.message;
            }
            else if (error.body.errorMessages) {
                return prefix + error.body.errorMessages.join();
            }
            else if (typeof error.body == 'string') {
                return prefix + error.body;
            }
            else {
                return prefix + JSON.stringify(error.body);
            }
        }
        catch (e) {
            return prefix + `Error Parsing Failed`; //: ${Object.prototype.toString.call(e)} ${JSON.stringify(e)}`;
        }
    }
    static ReadFromFile(url) {
        return new Promise((resolve, reject) => {
            const requestData = {
                url: url,
                json: true,
                encoding: 'utf8'
            };
            request.get(requestData, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode && response.statusCode >= 300) {
                    reject(body.message);
                }
                else {
                    let model = String.fromCharCode.apply(null, body.data);
                    resolve(model);
                }
            });
        });
    }
}
exports.Utils = Utils;
const convertToMapById = (entityMap) => {
    const map = Object.keys(entityMap.map).reduce((newMap, key) => {
        const filledEntity = entityMap.map[key];
        if (!filledEntity.entityId) {
            throw new Error(`Cannot convert filledEntityMap by name to filledEntityMap by id because id does not exist for entity: ${key}`);
        }
        newMap[filledEntity.entityId] = filledEntity;
        return newMap;
    }, {});
    return new models_1.FilledEntityMap({ map });
};
exports.addEntitiesById = (valuesByName) => {
    const valuesById = convertToMapById(valuesByName);
    const map = Object.assign({}, valuesByName.map, valuesById.map);
    return new models_1.FilledEntityMap({ map });
};
function replace(xs, updatedX, getId) {
    const index = xs.findIndex(x => getId(x) === getId(updatedX));
    if (index < 0) {
        throw new Error(`You attempted to replace item in list with id: ${getId(updatedX)} but no item could be found.  Perhaps you meant to add the item to the list or it was already removed.`);
    }
    return [...xs.slice(0, index), updatedX, ...xs.slice(index + 1)];
}
exports.replace = replace;
/* Returns true is SDK version in package is less than passed in version */
const packageJsonPath = path.join(__dirname, '..', 'package.json');
function isSDKOld(curVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packageJson = yield fs.readJson(packageJsonPath);
        if (packageJson.version === "0.0.0-development") {
            return false;
        }
        return semver.lt(packageJson.version, curVersion);
    });
}
exports.isSDKOld = isSDKOld;
exports.CL_DEVELOPER = 'ConversationLearnerDeveloper';
exports.UI_RUNNER_APPID = 'UIRunner_AppId';
exports.DEFAULT_MAX_SESSION_LENGTH = 20 * 60 * 1000; // 20 minutes
//# sourceMappingURL=Utils.js.map