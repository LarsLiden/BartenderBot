/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as CLM from '@conversationlearner/models';
export interface ICLClientOptions {
    CONVERSATION_LEARNER_SERVICE_URI: string;
    APIM_SUBSCRIPTION_KEY: string | undefined;
    LUIS_AUTHORING_KEY: string | undefined;
    LUIS_SUBSCRIPTION_KEY?: string;
}
export declare class CLClient {
    private options;
    constructor(options: ICLClientOptions);
    ValidationErrors(): string[];
    LuisAuthoringKey(): string | undefined;
    private BuildURL;
    private MakeURL;
    private MakeSessionURL;
    private send;
    /**
     * Retrieve information about a specific application
     * If the app ID isn't found in the set of (non-archived) apps,
     * returns 404 error ("not found")
     */
    GetApp(appId: string): Promise<CLM.AppBase>;
    GetAppSource(appId: string, packageId: string): Promise<CLM.AppDefinition>;
    PostAppSource(appId: string, appDefinition: CLM.AppDefinition): Promise<void>;
    /** Retrieve a list of (active) applications */
    GetApps(query: string): Promise<CLM.AppList>;
    /** Create a new application */
    CopyApps(srcUserId: string, destUserId: string, appId: string, luisSubscriptionKey: string): Promise<string>;
    /**
     * Archive an existing application
     * Note: "deleting" an application doesn't destroy it, but rather archives
     * it for a period (eg 30 days).  During the archive period, the application
     * can be restored with the next API call.  At the end of the archive period,
     * the application is destroyed.
     */
    ArchiveApp(appId: string): Promise<string>;
    /**
     * Create a new application
     */
    AddApp(app: CLM.AppBase, query: string): Promise<string>;
    /** Creates a new package tag */
    PublishApp(appId: string, tagName: string): Promise<CLM.PackageReference>;
    /** Sets a package tags as the live version */
    PublishProdPackage(appId: string, packageId: string): Promise<string>;
    /**
     * Retrieves definitions of ALL entities in the latest package
     * (or the specified package, if provided).  To retrieve just the IDs
     * of all entities, see the GetEntityIds method
     */
    GetEntities(appId: string, query?: string): Promise<CLM.EntityList>;
    /**
     * Retrieves the contents of many/all logDialogs.
     * To retrieve just a list of IDs of all logDialogs,
     * see the GET GetLogDialogIds method.
     */
    GetLogDialogs(appId: string, packageIds: string[]): Promise<CLM.LogDialogList>;
    /** Runs entity extraction (prediction). */
    LogDialogExtract(appId: string, logDialogId: string, turnIndex: string, userInput: CLM.UserInput): Promise<CLM.ExtractResponse>;
    /**
     * Retrieves information about a specific trainDialog in the current package
     * (or the specified package, if provided)
     */
    GetTrainDialog(appId: string, trainDialogId: string, includeDefinitions?: boolean): Promise<CLM.TrainDialog>;
    /** Runs entity extraction (prediction). */
    TrainDialogExtract(appId: string, trainDialogId: string, turnIndex: string, userInput: CLM.UserInput): Promise<CLM.ExtractResponse>;
    /** Creates a new session and a corresponding logDialog */
    StartSession(appId: string, sessionCreateParams: CLM.SessionCreateParams): Promise<CLM.Session>;
    /** Runs entity extraction (prediction). */
    SessionExtract(appId: string, sessionId: string, userInput: CLM.UserInput): Promise<CLM.ExtractResponse>;
    /** Take a turn and returns chosen action */
    SessionScore(appId: string, sessionId: string, scorerInput: CLM.ScoreInput): Promise<CLM.ScoreResponse>;
    /** End a session. */
    EndSession(appId: string, sessionId: string): Promise<string>;
    /** Creates a new teaching session and a corresponding trainDialog */
    StartTeach(appId: string, createTeachParams: CLM.CreateTeachParams): Promise<CLM.TeachResponse>;
    /**
     * Runs entity extraction (prediction).
     * If a more recent version of the package is available on
     * the server, the session will first migrate to that newer version.  This
     * doesn't affect the trainDialog maintained.
     */
    TeachExtract(appId: string, teachId: string, userInput: CLM.UserInput): Promise<CLM.ExtractResponse>;
    /**
     * Uploads a labeled entity extraction instance
     * ie "commits" an entity extraction label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    TeachExtractFeedback(appId: string, teachId: string, extractorStep: CLM.TrainExtractorStep): Promise<CLM.TeachResponse>;
    /**
     * Takes a turn and return distribution over actions.
     * If a more recent version of the package is
     * available on the server, the session will first migrate to that newer version.
     * This doesn't affect the trainDialog maintained by the teaching session.
     */
    TeachScore(appId: string, teachId: string, scorerInput: CLM.ScoreInput): Promise<CLM.ScoreResponse>;
    /**
     * Uploads a labeled scorer step instance
     * â€“ ie "commits" a scorer label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    TeachScoreFeedback(appId: string, teachId: string, scorerResponse: CLM.TrainScorerStep): Promise<CLM.TeachResponse>;
    /**
     * Ends a teach.
     * For Teach sessions, does NOT delete the associated trainDialog.
     * To delete the associated trainDialog, call DELETE on the trainDialog.
     */
    EndTeach(appId: string, teachId: string, query: string): Promise<CLM.TrainResponse>;
}
