/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { SessionInfo } from '../Memory/BotState';
import { EntityBase, MemoryValue, FilledEntityMap } from '@conversationlearner/models';
export declare class ReadOnlyClientMemoryManager {
    protected allEntities: EntityBase[];
    private sessionInfo;
    prevMemories: FilledEntityMap;
    curMemories: FilledEntityMap;
    protected __expired: boolean;
    constructor(prevMemories: FilledEntityMap, curMemories: FilledEntityMap, allEntities: EntityBase[], sessionInfo: SessionInfo);
    __Expire(): void;
    protected __FindEntity(entityName: string): EntityBase | undefined;
    /**
     * Get value of entity
     * @param entityName Name of Entity
     */
    EntityValue(entityName: string): string | null;
    /**
     * Get value of entity before most recent input
     * @param entityName Name of Entity
     */
    PrevEntityValue(entityName: string): (string | null);
    /**
     * Get value of entity as a Prebuilt Entity
     * @param entityName Name of Entity
     */
    EntityValueAsPrebuilt(entityName: string): MemoryValue[];
    /**
     * Get value of entity before most recent input as a Prebuilt Entity
     * @param entityName Name of Entity
     */
    PrevEntityValueAsPrebuilt(entityName: string): MemoryValue[];
    /**
     * Get entity values a comma delminated string
     * @param entityName Name of Entity
     */
    EntityValueAsList(entityName: string): string[];
    /**
     * Get entity values before most recent input a comma delminated string
     * @param entityName Name of Entity
     */
    PrevEntityValueAsList(entityName: string): string[];
    /**
     * Get entity value as a number
     * @param entityName Name of Entity
     */
    EntityValueAsNumber(entityName: string): number | null;
    /**
     * Get entity value before most recent input as a number
     * @param entityName Name of Entity
     */
    PrevValueAsNumber(entityName: string): number | null;
    /**
     * Get entity value as a boolean
     * @param entityName Name of Entity
     */
    EntityValueAsBoolean(entityName: string): boolean | null;
    /**
     * Get entity value before most recent input as a boolean
     * @param entityName Name of Entity
     */
    PrevValueAsBoolean(entityName: string): boolean | null;
    /**
     * Get entity value as object of type T
     * @param entityName Name of Entity
     */
    EntityValueAsObject<T>(entityName: string): T | null;
    /**
     * Get entity value before most recent input as object of type T
     * @param entityName Name of Entity
     */
    PrevEntityValueAsObject<T>(entityName: string): (T | null);
    /**
     * Get information about the current running session
     */
    SessionInfo(): SessionInfo;
}
export declare class ClientMemoryManager extends ReadOnlyClientMemoryManager {
    constructor(prevMemories: FilledEntityMap, curMemories: FilledEntityMap, allEntities: EntityBase[], sessionInfo: SessionInfo);
    AsReadOnly(): ReadOnlyClientMemoryManager;
    RememberEntity(entityName: string, entityValue: string | number | object): void;
    RememberEntities(entityName: string, entityValues: string[]): void;
    ForgetEntity(entityName: string, value?: string | null): void;
    /** Clear all entity values apart from any included in the list of saveEntityNames
     * @param saveEntityNames Array of entity names not to forget
     */
    ForgetAllEntities(saveEntityNames: string[]): void;
    /**
     * Copy values from one entity to another
     * @param entityNameFrom Source Entity
     * @param entityNameTo Destination Entity
     */
    CopyEntity(entityNameFrom: string, entityNameTo: string): void;
}
