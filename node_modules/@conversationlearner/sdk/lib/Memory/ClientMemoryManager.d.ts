/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BotMemory } from '../Memory/BotMemory';
import { SessionInfo } from '../Memory/BotState';
import { CLMemory } from '../CLMemory';
import { EntityBase, MemoryValue, FilledEntity } from '@conversationlearner/models';
export declare class ClientMemoryManager {
    botMemory: BotMemory;
    protected entities: EntityBase[];
    private sessionInfo;
    private prevMemories;
    static CreateAsync(clMemory: CLMemory, entities: EntityBase[]): Promise<ClientMemoryManager>;
    private constructor();
    private FindEntity(entityName);
    RememberEntityAsync(entityName: string, entityValue: string | number | object): Promise<void>;
    RememberEntitiesAsync(entityName: string, entityValues: string[]): Promise<void>;
    ForgetEntityAsync(entityName: string, value?: string | null): Promise<void>;
    /** Clear all entity values apart from any included in the list of saveEntityNames
     * Useful in the "onSessionEndCallback" to preserve a subset of entities for the next session
     */
    ForgetAllEntitiesAsync(saveEntityNames: string[]): Promise<void>;
    CopyEntityAsync(entityNameFrom: string, entityNameTo: string): Promise<void>;
    EntityValueAsync(entityName: string): Promise<string | null>;
    EntityValueAsPrebuiltAsync(entityName: string): Promise<MemoryValue[]>;
    EntityValueAsListAsync(entityName: string): Promise<string[]>;
    EntityValueAsNumberAsync(entityName: string): Promise<number | null>;
    EntityValueAsBooleanAsync(entityName: string): Promise<boolean | null>;
    EntityValueAsObjectAsync<T>(entityName: string): Promise<T | null>;
    PrevEntityValue(entityName: string): (string | null);
    PrevEntityValueAsPrebuilt(entityName: string): MemoryValue[];
    PrevEntityValueAsList(entityName: string): string[];
    PrevValueAsNumber(entityName: string): number | null;
    PrevValueAsBoolean(entityName: string): boolean | null;
    PrevEntityValueAsObject<T>(entityName: string): (T | null);
    GetFilledEntitiesAsync(): Promise<FilledEntity[]>;
    SessionInfo(): SessionInfo;
}
