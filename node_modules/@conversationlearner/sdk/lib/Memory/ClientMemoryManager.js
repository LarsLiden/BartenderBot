"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CLDebug_1 = require("../CLDebug");
const models_1 = require("@conversationlearner/models");
const errMsg = "called after your function has already returned. You must await results within your code rather than use callbacks";
class ReadOnlyClientMemoryManager {
    constructor(prevMemories, curMemories, allEntities, sessionInfo) {
        this.allEntities = [];
        this.allEntities = allEntities;
        this.sessionInfo = sessionInfo;
        this.prevMemories = prevMemories;
        this.curMemories = curMemories;
        this.__expired = false;
    }
    // TODO: Why is this public but prefixed with __ to indicate private
    __Expire() {
        this.__expired = true;
    }
    __FindEntity(entityName) {
        let match = this.allEntities.find(e => e.entityName == entityName);
        return match;
    }
    /**
     * Get value of entity
     * @param entityName Name of Entity
     */
    EntityValue(entityName) {
        return this.curMemories.ValueAsString(entityName);
    }
    /**
     * Get value of entity before most recent input
     * @param entityName Name of Entity
     */
    PrevEntityValue(entityName) {
        return this.prevMemories.ValueAsString(entityName);
    }
    /**
     * Get value of entity as a Prebuilt Entity
     * @param entityName Name of Entity
     */
    EntityValueAsPrebuilt(entityName) {
        return this.curMemories.ValueAsPrebuilt(entityName);
    }
    /**
     * Get value of entity before most recent input as a Prebuilt Entity
     * @param entityName Name of Entity
     */
    PrevEntityValueAsPrebuilt(entityName) {
        return this.prevMemories.ValueAsPrebuilt(entityName);
    }
    /**
     * Get entity values a comma delminated string
     * @param entityName Name of Entity
     */
    EntityValueAsList(entityName) {
        return this.curMemories.ValueAsList(entityName);
    }
    /**
     * Get entity values before most recent input a comma delminated string
     * @param entityName Name of Entity
     */
    PrevEntityValueAsList(entityName) {
        return this.prevMemories.ValueAsList(entityName);
    }
    /**
     * Get entity value as a number
     * @param entityName Name of Entity
     */
    EntityValueAsNumber(entityName) {
        return this.curMemories.ValueAsNumber(entityName);
    }
    /**
     * Get entity value before most recent input as a number
     * @param entityName Name of Entity
     */
    PrevValueAsNumber(entityName) {
        return this.prevMemories.ValueAsNumber(entityName);
    }
    /**
     * Get entity value as a boolean
     * @param entityName Name of Entity
     */
    EntityValueAsBoolean(entityName) {
        return this.curMemories.ValueAsBoolean(entityName);
    }
    /**
     * Get entity value before most recent input as a boolean
     * @param entityName Name of Entity
     */
    PrevValueAsBoolean(entityName) {
        return this.prevMemories.ValueAsBoolean(entityName);
    }
    /**
     * Get entity value as object of type T
     * @param entityName Name of Entity
     */
    EntityValueAsObject(entityName) {
        return this.curMemories.ValueAsObject(entityName);
    }
    /**
     * Get entity value before most recent input as object of type T
     * @param entityName Name of Entity
     */
    PrevEntityValueAsObject(entityName) {
        return this.prevMemories.ValueAsObject(entityName);
    }
    /**
     * Get information about the current running session
     */
    SessionInfo() {
        return this.sessionInfo;
    }
}
exports.ReadOnlyClientMemoryManager = ReadOnlyClientMemoryManager;
class ClientMemoryManager extends ReadOnlyClientMemoryManager {
    constructor(prevMemories, curMemories, allEntities, sessionInfo) {
        super(prevMemories, curMemories, allEntities, sessionInfo);
    }
    AsReadOnly() {
        return this;
    }
    RememberEntity(entityName, entityValue) {
        if (this.__expired) {
            CLDebug_1.CLDebug.Error(`ClientMemoryManager: RememberEntity "${entityName}" ${errMsg}`);
            return;
        }
        let entity = this.__FindEntity(entityName);
        if (!entity) {
            CLDebug_1.CLDebug.Error(`Can't find Entity named: ${entityName}`);
            return;
        }
        if (entity.entityType != models_1.EntityType.LOCAL && entity.entityType != models_1.EntityType.LUIS) {
            CLDebug_1.CLDebug.Error(`Not allowed to set values of pre-built Entities: ${entityName}`);
            return;
        }
        if (typeof entityValue == 'object') {
            entityValue = JSON.stringify(entityValue);
        }
        else if (typeof entityValue == 'number') {
            entityValue = entityValue.toString();
        }
        this.curMemories.Remember(entity.entityName, entity.entityId, entityValue, entity.isMultivalue);
    }
    RememberEntities(entityName, entityValues) {
        if (this.__expired) {
            CLDebug_1.CLDebug.Error(`ClientMemoryManager: RememberEntities "${entityName}" ${errMsg}`);
            return;
        }
        let entity = this.__FindEntity(entityName);
        if (!entity) {
            CLDebug_1.CLDebug.Error(`Can't find Entity named: ${entityName}`);
            return;
        }
        if (entity.entityType != models_1.EntityType.LOCAL && entity.entityType != models_1.EntityType.LUIS) {
            CLDebug_1.CLDebug.Error(`Not allowed to set values of pre-built Entities: ${entityName}`);
            return;
        }
        if (!entity.isMultivalue) {
            CLDebug_1.CLDebug.Error(`RememberEntities called on entity (${entityName}) that isn't Multi-Value.  Only the last value will be remembered`);
        }
        this.curMemories.RememberMany(entity.entityName, entity.entityId, entityValues, entity.isMultivalue);
    }
    ForgetEntity(entityName, value = null) {
        if (this.__expired) {
            CLDebug_1.CLDebug.Error(`ClientMemoryManager: ForgetEntity "${entityName}" ${errMsg}`);
            return;
        }
        let entity = this.__FindEntity(entityName);
        if (!entity) {
            CLDebug_1.CLDebug.Error(`Can't find Entity named: ${entityName}`);
            return;
        }
        // If no value given, wipe all entites from buckets
        this.curMemories.Forget(entity.entityName, value, entity.isMultivalue);
    }
    /** Clear all entity values apart from any included in the list of saveEntityNames
     * @param saveEntityNames Array of entity names not to forget
     */
    ForgetAllEntities(saveEntityNames) {
        if (this.__expired) {
            CLDebug_1.CLDebug.Error(`ClientMemoryManager: ForgetAllEntities ${errMsg}`);
            return;
        }
        for (let entity of this.allEntities) {
            if (saveEntityNames.indexOf(entity.entityName) < 0) {
                this.curMemories.Forget(entity.entityName, null, entity.isMultivalue);
            }
        }
    }
    /**
     * Copy values from one entity to another
     * @param entityNameFrom Source Entity
     * @param entityNameTo Destination Entity
     */
    CopyEntity(entityNameFrom, entityNameTo) {
        if (this.__expired) {
            CLDebug_1.CLDebug.Error(`ClientMemoryManager: CopyEntity ${errMsg}`);
            return;
        }
        let entityFrom = this.__FindEntity(entityNameFrom);
        let entityTo = this.__FindEntity(entityNameTo);
        if (!entityFrom) {
            CLDebug_1.CLDebug.Error(`Can't find Entity named: ${entityNameFrom}`);
            return;
        }
        if (!entityTo) {
            CLDebug_1.CLDebug.Error(`Can't find Entity named: ${entityNameTo}`);
            return;
        }
        if (entityFrom.isMultivalue != entityTo.isMultivalue) {
            CLDebug_1.CLDebug.Error(`Can't copy between Bucket and Non-Bucket Entities`);
            return;
        }
        // Clear "To" entity
        this.curMemories.Forget(entityNameTo);
        // Get value of "From" entity
        let values = this.curMemories.ValueAsList(entityNameFrom);
        // Copy values from "From"
        for (let value of values) {
            this.RememberEntity(entityNameTo, value);
        }
    }
}
exports.ClientMemoryManager = ClientMemoryManager;
//# sourceMappingURL=ClientMemoryManager.js.map