/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { CLMemory } from '../CLMemory';
import { Memory, FilledEntity, MemoryValue, FilledEntityMap } from '@conversationlearner/models';
import { ClientMemoryManager } from '..';
export declare class BotMemory {
    private static _instance;
    private static MEMKEY;
    private clMemory;
    filledEntityMap: FilledEntityMap;
    private constructor();
    static Get(clMemory: CLMemory): BotMemory;
    FilledEntityMap(): Promise<FilledEntityMap>;
    private Init;
    Serialize(): string;
    private Deserialize;
    private Set;
    RestoreFromMapAsync(filledEntityMap: FilledEntityMap): Promise<void>;
    RestoreFromMemoryManagerAsync(memoryManager: ClientMemoryManager): Promise<void>;
    ClearAsync(saveList?: string[] | void): Promise<void>;
    RememberEntity(entityName: string, entityId: string, entityValue: string, isBucket?: boolean, builtinType?: string | null, resolution?: any | null): Promise<void>;
    RememberMany(entityName: string, entityId: string, entityValues: string[], isBucket?: boolean, builtinType?: string | null, resolution?: {} | null): Promise<void>;
    /** Return array of entity names for which I've remembered something */
    RememberedNames(): Promise<string[]>;
    /** Return array of entity Ids for which I've remembered something */
    FilledEntitiesAsync(): Promise<FilledEntity[]>;
    /** Given negative entity name, return positive version */
    private PositiveName;
    /** Forget a predicted Entity */
    ForgetEntity(entityName: string, entityValue: string, isMultiValue: boolean): Promise<void>;
    /** Forget an entity value */
    Forget(entityName: string, entityValue?: string | null, isBucket?: boolean): Promise<void>;
    DumpMemory(): Promise<Memory[]>;
    Value(entityName: string): Promise<string | null>;
    ValueAsList(entityName: string): Promise<string[]>;
    ValueAsPrebuilt(entityName: string): Promise<MemoryValue[]>;
    private MemoryValues;
}
