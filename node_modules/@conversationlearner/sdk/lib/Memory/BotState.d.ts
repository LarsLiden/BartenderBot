/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as BB from 'botbuilder';
import { CLMemory } from '../CLMemory';
import { AppBase } from '@conversationlearner/models';
import { QueuedInput } from './InputQueue';
export interface ConversationSession {
    sessionId: string | null;
    conversationId: string | null;
}
export interface SessionInfo {
    userName: string;
    userId: string;
    logDialogId: string;
}
export interface ActiveApps {
    [appId: string]: string;
}
export declare enum BotStateType {
    APP = "APP",
    CONVERSTAION_ID = "CONVERSATION_ID",
    CONVERSATION_REFERENCE = "CONVERSATION_REFERENCE",
    EDITING_PACKAGE = "EDITING_PACKAGE",
    IN_TEACH = "IN_TEACH",
    LAST_ACTIVE = "LAST_ACTIVE",
    LOG_DIALOG_ID = "LOG_DIALOG_ID",
    MESSAGE_MUTEX = "MESSAGE_MUTEX",
    ON_ENDSESSION_CALLED = "ON_ENDSESSION_CALLED",
    ORIG_SESSION = "ORIG_SESSION",
    SESSION_ID = "SESSION_ID",
}
export declare class BotState {
    private static _instance;
    memory: CLMemory;
    private constructor();
    static Get(clMemory: CLMemory): BotState;
    private GetStateAsync<T>(botStateType);
    private SetStateAsync<T>(botStateType, value);
    _SetAppAsync(app: AppBase | null): Promise<void>;
    GetApp(): Promise<AppBase | null>;
    SetApp(app: AppBase | null): Promise<void>;
    GetConversationId(): Promise<string | null>;
    SetConversationId(conversationId: string | null): Promise<void>;
    GetEditingPackages(): Promise<ActiveApps>;
    SetEditingPackage(appId: string, packageId: string): Promise<{
        [appId: string]: string;
    }>;
    GetEditingPackageForApp(appId: string): Promise<string>;
    ClearEditingPackageAsync(): Promise<void>;
    OrgSessionIdAsync(sessionId: string): Promise<string | null>;
    GetOrgSessionIdAsync(): Promise<string | null>;
    SetOrgSessionId(sessionId: string | null): Promise<void>;
    GetEndSessionCalled(): Promise<boolean>;
    SetOnEndSessionCalled(called: boolean): Promise<void>;
    GetLastActive(): Promise<number>;
    SetLastActive(lastActive: number): Promise<void>;
    GetSessionId(conversationId: string): Promise<string | null>;
    SetSessionId(sessionId: string | null): Promise<void>;
    SetSessionAsync(sessionId: string | null, logDialogId: string | null, conversationId: string | null, inTeach: boolean, orgSessionId: string | null): Promise<void>;
    EndSessionAsync(): Promise<void>;
    GetInTeach(): Promise<boolean>;
    SetInTeach(inTeach: boolean): Promise<void>;
    SetConversationReference(conversationReference: Partial<BB.ConversationReference> | null): Promise<void>;
    GetConversationReverence(): Promise<Partial<BB.ConversationReference> | null>;
    CreateConversationReference(userName: string, userId: string, conversationId: string): Promise<void>;
    GetLogDialogId(): Promise<string | null>;
    SetLogDialogId(logDialogId: string | null): Promise<void>;
    GetMessageProcessing(): Promise<QueuedInput | null>;
    MessageProcessingPopAsync(): Promise<QueuedInput | null>;
    SetMessageProcessing(queuedInput: QueuedInput | null): Promise<void>;
    SessionInfoAsync(): Promise<SessionInfo>;
}
