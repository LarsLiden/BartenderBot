/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as BB from 'botbuilder';
import { CLRunner } from './CLRunner';
import { ICLOptions } from './CLOptions';
import { CLClient } from './CLClient';
import { ClientMemoryManager } from './Memory/ClientMemoryManager';
import { CLRecognizerResult } from './CLRecognizeResult';
export declare class ConversationLearner {
    static options: ICLOptions | null;
    static clClient: CLClient;
    clRunner: CLRunner;
    appId: string | undefined;
    static Init(options: ICLOptions, storage?: BB.Storage | null): void;
    constructor(appId: string | undefined, maxTimeout?: number);
    recognize(turnContext: BB.TurnContext, force?: boolean): Promise<CLRecognizerResult | null>;
    SendResult(result: CLRecognizerResult): Promise<void>;
    inTrainingUI(activity: BB.Activity): boolean;
    AddAPICallback(name: string, target: (memoryManager: ClientMemoryManager, ...args: string[]) => Promise<Partial<BB.Activity> | string | void>): void;
    EntityDetectionCallback(target: (text: string, memoryManager: ClientMemoryManager) => Promise<void>): void;
    OnSessionEndCallback(target: (memoryManager: ClientMemoryManager) => Promise<void>): void;
    OnSessionStartCallback(target: (memoryManager: ClientMemoryManager) => Promise<void>): void;
}
