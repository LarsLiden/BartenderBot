"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Redis = require("redis");
const CLDebug_1 = require("./CLDebug");
class RedisStorage {
    constructor(settings) {
        this.redisClient = Redis.createClient(settings.port ? settings.port : 6380, settings.server, {
            auth_pass: settings.key,
            tls: { servername: settings.server }
        });
        this.redisClient.on('error', (err) => {
            CLDebug_1.CLDebug.Error(err, "RedisStorage");
        });
        this._get = this.promisify(this.redisClient.get);
        this._set = this.promisify(this.redisClient.set);
        this._del = this.promisify(this.redisClient.del);
    }
    /**
     * Loads store items from storage
     *
     * @param keys Array of item keys to read from the store.
     */
    read(keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let storeItems = {};
            // foreach key
            for (let iKey in keys) {
                let key = keys[iKey];
                let storeItem = yield this._get(key);
                storeItems[key] = JSON.parse(storeItem);
            }
            return storeItems;
        });
    }
    /**
     * Saves store items to storage.
     *
     * @param changes Map of items to write to storage.
     */
    write(changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (let key in changes) {
                let storeItem = changes[key];
                yield this._set(key, JSON.stringify(storeItem));
            }
        });
    }
    /**
     * Removes store items from storage
     *
     * @param keys Array of item keys to remove from the store.
     */
    delete(keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (let iKey in keys) {
                let key = keys[iKey];
                yield this._del(key);
            }
        });
    }
    promisify(func) {
        return (...args) => new Promise((resolve, reject) => {
            const callback = (err, data) => (err ? reject(err) : resolve(data));
            func.apply(this.redisClient, [...args, callback]);
        });
    }
}
exports.RedisStorage = RedisStorage;
//# sourceMappingURL=RedisStorage.js.map