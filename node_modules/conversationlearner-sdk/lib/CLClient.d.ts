/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as models from 'conversationlearner-models';
export interface ICLClientOptions {
    CONVERSATION_LEARNER_SERVICE_URI: string;
    APIM_SUBSCRIPTION_KEY: string | undefined;
    LUIS_AUTHORING_KEY: string | undefined;
    LUIS_SUBSCRIPTION_KEY?: string;
}
export declare class CLClient {
    private options;
    private actionCache;
    private entityCache;
    private exportCache;
    constructor(options: ICLClientOptions);
    ValidationErrors(): string[];
    LuisAuthoringKey(): string | undefined;
    private BuildURL(baseUri, apiPath, query?);
    private MakeURL(apiPath, query?);
    private MakeSessionURL(apiPath, query?);
    ClearExportCache(appId: string): void;
    private send<T>(method, url, body?);
    /**
     * Retrieves information about a specific action for the current package
     * (or the specified package if provided)
     */
    GetAction(appId: string, actionId: string, query: string): Promise<models.ActionBase>;
    /**
     * Retrieves definitions of ALL actions for the current package
     * (or the specified package if provided). To retrieve just the
     * IDs of actions, see the GetActionIds Method
     */
    GetActions(appId: string, query: string): Promise<models.ActionList>;
    /**
     * Retrieves a list of action IDs for the latest package
     * (or the specified package, if provided).  To retrieve
     * the definitions of many actions, see the GetAction method
     */
    GetActionIds(appId: string, query: string): Promise<models.ActionIdList>;
    /** Updates payload and/or metadata on an existing action */
    EditAction(appId: string, action: models.ActionBase): Promise<models.DeleteEditResponse>;
    /** Marks an action as deleted */
    DeleteAction(appId: string, actionId: string): Promise<models.DeleteEditResponse>;
    /** Create a new action */
    AddAction(appId: string, action: models.ActionBase): Promise<string>;
    /**
     * Retrieve information about a specific application
     * If the app ID isn't found in the set of (non-archived) apps,
     * returns 404 error ("not found")
     */
    GetApp(appId: string): Promise<models.AppBase>;
    GetAppSource(appId: string, packageId: string): Promise<models.AppDefinition>;
    GetAppTrainingStatus(appId: string, query: string): Promise<models.TrainingStatus>;
    /** Retrieve a list of (active) applications */
    GetApps(query: string): Promise<models.AppList>;
    /** Create a new application */
    CopyApps(srcUserId: string, destUserId: string, appId: string, luisSubscriptionKey: string): Promise<string>;
    /**
     * Rename an existing application or changes its LUIS key
     * Note: Renaming an application does not affect packages
     */
    EditApp(app: models.AppBase, query: string): Promise<string>;
    /**
     * Archive an existing application
     * Note: "deleting" an application doesn't destroy it, but rather archives
     * it for a period (eg 30 days).  During the archive period, the application
     * can be restored with the next API call.  At the end of the archive period,
     * the application is destroyed.
     */
    ArchiveApp(appId: string): Promise<string>;
    /**
     * Create a new application
     */
    AddApp(app: models.AppBase, query: string): Promise<string>;
    /**
     * Destroys an existing application, including all its models, sessions, and logged dialogs
     * Deleting an application from the archive really destroys it â€“ no undo.
     */
    DeleteApp(appId: string): Promise<string>;
    /** Retrieves details for a specific $appId */
    GetAppStatus(appId: string): Promise<models.AppBase>;
    /** Moves an application from the archive to the set of active applications */
    RestoreApp(appId: string): Promise<string>;
    /** Retrieves a list of application Ids in the archive for the given user */
    GetArchivedAppIds(query: string): Promise<models.AppIdList>;
    /** Retrieves a list of full applications in the archive for the given user */
    GetArchivedApps(query: string): Promise<models.AppList>;
    /** Creates a new package tag */
    PublishApp(appId: string, tagName: string): Promise<models.PackageReference>;
    /** Sets a package tags as the live version */
    PublishProdPackage(appId: string, packageId: string): Promise<string>;
    /**
     * Retrieves information about a specific entity in the latest package
     * (or the specified package, if provided)
     */
    GetEntity(appId: string, entityId: string, query: string): Promise<models.EntityBase>;
    /**
     * Retrieves definitions of ALL entities in the latest package
     * (or the specified package, if provided).  To retrieve just the IDs
     * of all entities, see the GetEntityIds method
     */
    GetEntities(appId: string, query?: string): Promise<models.EntityList>;
    /**
     * Retrieves a list of entity IDs for the latest package
     * (or the specified package, if provided).  To retrieve the definitions
     * of many entities, see the GetEntities method
     */
    GetEntityIds(appId: string, query: string): Promise<models.EntityIdList>;
    /** Updates name and/or metadata on an existing entity */
    EditEntity(appId: string, entity: models.EntityBase): Promise<string>;
    /** Deletes an entity */
    DeleteEntity(appId: string, entityId: string): Promise<string>;
    /** Create a new entity */
    AddEntity(appId: string, entity: models.EntityBase): Promise<string>;
    /** Retrieves information about a specific logDialog */
    GetLogDialog(appId: string, logDialogId: string): Promise<models.LogDialog>;
    /**
     * Retrieves the contents of many/all logDialogs.
     * To retrieve just a list of IDs of all logDialogs,
     * see the GET GetLogDialogIds method.
     */
    GetLogDialogs(appId: string, packageId: string): Promise<models.LogDialogList>;
    /**
     * Retrieves just the IDs of logDialogs.
     * To retrieve the contents of many logDialogs, see the GetLogDialogs method.
     */
    GetLogDialogIds(appId: string, query: string): Promise<models.LogDialogIdList>;
    /** Deletes a LogDialog */
    DeleteLogDialog(appId: string, logDialogId: string): Promise<string>;
    /** Create a new TrainDialog */
    AddTrainDialog(appId: string, trainDialog: models.TrainDialog): Promise<models.TrainResponse>;
    /** Updates a trainDialog, overwriting the content of its dialog */
    EditTrainDialog(appId: string, trainDialog: models.TrainDialog): Promise<models.TrainResponse>;
    /**
     * Retrieves information about a specific trainDialog in the current package
     * (or the specified package, if provided)
     */
    GetTrainDialog(appId: string, trainDialogId: string, includeDefinitions?: boolean): Promise<models.TrainDialog>;
    /**
     * Retrieves the contents of many/all train dialogs.
     * To retrieve just a list of IDs of all trainDialogs,
     * see the GetTrainDialogIds method
     */
    GetTrainDialogs(appId: string, query: string): Promise<models.TrainDialogList>;
    /**
     * Retrieves a list of trainDialog IDs.
     * To retrieve the contents of multiple trainDialogs,
     * see the GetTrainDialogs method
     */
    GetTrainDialogIds(appId: string, query: string): Promise<models.TrainDialogIdList>;
    /** Deletes a TrainDialog */
    DeleteTrainDialog(appId: string, trainDialogId: string): Promise<models.TrainResponse>;
    /** Runs entity extraction (prediction). */
    TrainDialogExtract(appId: string, trainDialogId: string, turnIndex: string, userInput: models.UserInput): Promise<models.ExtractResponse>;
    /** Creates a new session and a corresponding logDialog */
    StartSession(appId: string, sessionCreateParams: models.SessionCreateParams): Promise<models.Session>;
    /** Retrieves information about the specified session */
    GetSession(appId: string, sessionId: string): Promise<models.Session>;
    /** Runs entity extraction (prediction). */
    SessionExtract(appId: string, sessionId: string, userInput: models.UserInput): Promise<models.ExtractResponse>;
    /** Take a turn and returns chosen action */
    SessionScore(appId: string, sessionId: string, scorerInput: models.ScoreInput): Promise<models.ScoreResponse>;
    /** End a session. */
    EndSession(appId: string, sessionId: string): Promise<string>;
    /**
     * Retrieves definitions of ALL open sessions
     * To retrieve just the IDs, see the GetSessionIds method
     */
    GetSessions(appId: string, query: string): Promise<models.SessionList>;
    /**
     * Retrieves a list of session IDs
     * To retrieve the definitions, see the GetSessions method
     */
    GetSessionIds(appId: string, query: string): Promise<models.SessionIdList>;
    /** Creates a new teaching session and a corresponding trainDialog */
    StartTeach(appId: string, createTeachParams: models.CreateTeachParams | null): Promise<models.TeachResponse>;
    /** Retrieves information about the specified teach */
    GetTeach(appId: string, teachId: string): Promise<models.Teach>;
    /**
     * Runs entity extraction (prediction).
     * If a more recent version of the package is available on
     * the server, the session will first migrate to that newer version.  This
     * doesn't affect the trainDialog maintained.
     */
    TeachExtract(appId: string, teachId: string, userInput: models.UserInput): Promise<models.ExtractResponse>;
    /**
     * Uploads a labeled entity extraction instance
     * ie "commits" an entity extraction label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    TeachExtractFeedback(appId: string, teachId: string, extractorStep: models.TrainExtractorStep): Promise<models.TeachResponse>;
    /**
     * Takes a turn and return distribution over actions.
     * If a more recent version of the package is
     * available on the server, the session will first migrate to that newer version.
     * This doesn't affect the trainDialog maintained by the teaching session.
     */
    TeachScore(appId: string, teachId: string, scorerInput: models.ScoreInput): Promise<models.ScoreResponse>;
    /**
     * Uploads a labeled scorer step instance
     * â€“ ie "commits" a scorer label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    TeachScoreFeedback(appId: string, teachId: string, scorerResponse: models.TrainScorerStep): Promise<models.TeachResponse>;
    /**
     * Ends a teach.
     * For Teach sessions, does NOT delete the associated trainDialog.
     * To delete the associated trainDialog, call DELETE on the trainDialog.
     */
    EndTeach(appId: string, teachId: string, query: string): Promise<models.TrainResponse>;
    /**
     * Retrieves definitions of ALL teaching sessions
     * To retrieve just the IDs, see the GetTeachIds method
     */
    GetTeaches(appId: string, query: string): Promise<models.TeachList>;
    /**
     * Retrieves a list of teach session IDs
     * To retrieve the definitions, see the GetTeaches method
     */
    GetTeachIds(appId: string, query: string): Promise<models.TeachIdList>;
}
