"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const CLRunner_1 = require("./CLRunner");
const CLMemory_1 = require("./CLMemory");
const CLDebug_1 = require("./CLDebug");
const CLClient_1 = require("./CLClient");
const Server_1 = require("./Http/Server");
const DOLRunner_1 = require("./DOLRunner");
const Utils_1 = require("./Utils");
class ConversationLearner {
    constructor(appId, maxTimeout) {
        if (!ConversationLearner.options) {
            throw new Error("Init() must be called on ConversationLearner before instances are created");
        }
        if (typeof maxTimeout !== 'number') {
            maxTimeout = Utils_1.DEFAULT_MAX_SESSION_LENGTH;
        }
        this.appId = appId;
        this.clRunner = CLRunner_1.CLRunner.Create(appId, maxTimeout, ConversationLearner.clClient);
    }
    static Init(options, storage = null) {
        ConversationLearner.options = options;
        try {
            CLDebug_1.CLDebug.Log('Creating Conversation Learner Client....');
            this.clClient = new CLClient_1.CLClient(options);
            CLMemory_1.CLMemory.Init(storage);
            // Should we start DirectOffline server (for Editing UI)
            if (options.DOL_START) {
                DOLRunner_1.startDirectOffLineServer(options.DOL_SERVICE_URL, options.DOL_BOT_URL);
            }
            const sdkServer = Server_1.default(this.clClient);
            sdkServer.listen(options.CONVERSATION_LEARNER_SDK_PORT, (err) => {
                if (err) {
                    CLDebug_1.CLDebug.Error(err, 'Server/Init');
                }
                else {
                    CLDebug_1.CLDebug.Log(`${sdkServer.name} listening to ${sdkServer.url}`);
                }
            });
            CLDebug_1.CLDebug.Log('Initialization complete.');
        }
        catch (error) {
            CLDebug_1.CLDebug.Error(error, 'Dialog Constructor');
        }
    }
    recognize(turnContext, force) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.clRunner.recognize(turnContext, force);
        });
    }
    SendResult(result) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.clRunner.SendIntent(result);
        });
    }
    // Returns true is bot is running in the Training UI
    inTrainingUI(activity) {
        return (activity.from.name === Utils_1.CL_DEVELOPER);
    }
    AddAPICallback(name, target) {
        this.clRunner.AddAPICallback(name, target);
    }
    EntityDetectionCallback(target) {
        this.clRunner.entityDetectionCallback = target;
    }
    OnSessionEndCallback(target) {
        this.clRunner.onSessionEndCallback = target;
    }
    OnSessionStartCallback(target) {
        this.clRunner.onSessionStartCallback = target;
    }
}
ConversationLearner.options = null;
exports.ConversationLearner = ConversationLearner;
//# sourceMappingURL=ConversationLearner.js.map